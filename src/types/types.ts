/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Artifacts API
 * 
Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.

Website: https://artifactsmmo.com/

Documentation: https://docs.artifactsmmo.com/

OpenAPI Spec: https://api.artifactsmmo.com/openapi.json

 * OpenAPI spec version: 5.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

/**
 * Target of the achievement.
 */
export type AccountAchievementSchemaTarget = string | null;

/**
 * Completed at.
 */
export type AccountAchievementSchemaCompletedAt = string | null;

export interface AccountAchievementSchema {
  /** Name of the achievement. */
  name: string;
  /** Code of the achievement.  */
  code: string;
  /** Description of the achievement. */
  description: string;
  /** Points of the achievement. Used for the leaderboard. */
  points: number;
  /** Type of achievement. */
  type: AchievementType;
  /** Target of the achievement. */
  target: AccountAchievementSchemaTarget;
  /** Total to do. */
  total: number;
  /** Rewards. */
  rewards: AchievementRewardsSchema;
  /** Current progress. */
  current: number;
  /** Completed at. */
  completed_at: AccountAchievementSchemaCompletedAt;
}

export interface AccountDetails {
  /** Username. */
  username: string;
  /** Member status. */
  member: boolean;
  /** Account status. */
  status: AccountStatus;
  /** Account badges. */
  badges?: unknown[];
  /** Skins owned. */
  skins: unknown[];
  /** Achievement points. */
  achievements_points: number;
  /** Banned. */
  banned: boolean;
  /** Ban reason. */
  ban_reason?: string;
}

export interface AccountDetailsSchema {
  data: AccountDetails;
}

export interface AccountLeaderboardSchema {
  /** Position in the leaderboard. */
  position: number;
  /** Account name. */
  account: string;
  /** Member status. */
  status: AccountStatus;
  /** Achievements points. */
  achievements_points: number;
  /** Gold in the account. */
  gold: number;
}

export type AccountLeaderboardType =
  (typeof AccountLeaderboardType)[keyof typeof AccountLeaderboardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountLeaderboardType = {
  achievements_points: 'achievements_points',
  gold: 'gold',
} as const;

export type AccountLeaderboardTypeAZAZ09 = AccountLeaderboardType;

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountStatus = {
  standard: 'standard',
  founder: 'founder',
  gold_founder: 'gold_founder',
  vip_founder: 'vip_founder',
} as const;

export interface AchievementResponseSchema {
  data: AchievementSchema;
}

export interface AchievementRewardsSchema {
  /** Gold rewards. */
  gold: number;
}

/**
 * Target of the achievement.
 */
export type AchievementSchemaTarget = string | null;

export interface AchievementSchema {
  /** Name of the achievement. */
  name: string;
  /** Code of the achievement.  */
  code: string;
  /** Description of the achievement. */
  description: string;
  /** Points of the achievement. Used for the leaderboard. */
  points: number;
  /** Type of achievement. */
  type: AchievementType;
  /** Target of the achievement. */
  target: AchievementSchemaTarget;
  /** Total to do. */
  total: number;
  /** Rewards. */
  rewards: AchievementRewardsSchema;
}

export type AchievementType =
  (typeof AchievementType)[keyof typeof AchievementType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AchievementType = {
  combat_kill: 'combat_kill',
  combat_drop: 'combat_drop',
  combat_level: 'combat_level',
  gathering: 'gathering',
  crafting: 'crafting',
  recycling: 'recycling',
  task: 'task',
  other: 'other',
  use: 'use',
} as const;

export type AchievementTypeAZAZ09 = AchievementType;

export type ActionType = (typeof ActionType)[keyof typeof ActionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActionType = {
  movement: 'movement',
  fight: 'fight',
  crafting: 'crafting',
  gathering: 'gathering',
  buy_ge: 'buy_ge',
  sell_ge: 'sell_ge',
  buy_npc: 'buy_npc',
  sell_npc: 'sell_npc',
  cancel_ge: 'cancel_ge',
  delete_item: 'delete_item',
  deposit_item: 'deposit_item',
  withdraw_item: 'withdraw_item',
  deposit_gold: 'deposit_gold',
  withdraw_gold: 'withdraw_gold',
  equip: 'equip',
  unequip: 'unequip',
  task: 'task',
  christmas_exchange: 'christmas_exchange',
  recycling: 'recycling',
  rest: 'rest',
  use: 'use',
  buy_bank_expansion: 'buy_bank_expansion',
  give_item: 'give_item',
  give_gold: 'give_gold',
  change_skin: 'change_skin',
  rename: 'rename',
} as const;

export interface ActiveEventSchema {
  /** Name of the event. */
  name: string;
  /** Code of the event. */
  code: string;
  /** Map of the event. */
  map: MapSchema;
  /** Previous map skin. */
  previous_map: MapSchema;
  /** Duration in minutes. */
  duration: number;
  /** Expiration datetime. */
  expiration: string;
  /** Start datetime. */
  created_at: string;
}

export interface AddAccountSchema {
  /**
   * Your desired username.
   * @minLength 6
   * @maxLength 32
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  username: string;
  /**
   * Your password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  password: string;
  /** Your email. */
  email: string;
}

export interface AddCharacterSchema {
  /**
   * Your desired character name. It's unique and all players can see it.
   * @minLength 3
   * @maxLength 12
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  name: string;
  /** Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
  skin: CharacterSkin;
}

export interface AnnouncementSchema {
  /** Announcement text. */
  message: string;
  /** Datetime of the announcement. */
  created_at?: string;
}

/**
 * Quantity of the condition (if any).
 */
export type BadgeConditionSchemaQuantity = number | null;

export interface BadgeConditionSchema {
  /** Code of the condition. */
  code: string;
  /** Quantity of the condition (if any). */
  quantity: BadgeConditionSchemaQuantity;
}

export interface BadgeResponseSchema {
  data: BadgeSchema;
}

/**
 * Season of the badge.
 */
export type BadgeSchemaSeason = number | null;

export interface BadgeSchema {
  /** Code of the badge. This is the badge's unique identifier (ID). */
  code: string;
  /** Season of the badge. */
  season?: BadgeSchemaSeason;
  /** Description of the badge. */
  description: string;
  /** Conditions to get the badge. */
  conditions: BadgeConditionSchema[];
}

export interface BankExtensionSchema {
  /**
   * Price of the bank extension.
   * @minimum 0
   */
  price: number;
}

export interface BankExtensionTransactionResponseSchema {
  data: BankExtensionTransactionSchema;
}

export interface BankExtensionTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  transaction: BankExtensionSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface BankGoldTransactionResponseSchema {
  data: BankGoldTransactionSchema;
}

export interface BankGoldTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Bank details. */
  bank: GoldSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface BankItemTransactionResponseSchema {
  data: BankItemTransactionSchema;
}

export interface BankItemTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Items details. */
  items: SimpleItemSchema[];
  /** Items in your banks. */
  bank: SimpleItemSchema[];
  /** Player details. */
  character: CharacterSchema;
}

export interface BankResponseSchema {
  data: BankSchema;
}

export interface BankSchema {
  /**
   * Maximum slots in your bank.
   * @minimum 0
   */
  slots: number;
  /**
   * Bank expansions.
   * @minimum 0
   */
  expansions: number;
  /**
   * Next expansion cost.
   * @minimum 0
   */
  next_expansion_cost: number;
  /**
   * Quantity of gold in your bank.
   * @minimum 0
   */
  gold: number;
}

export interface ChangePassword {
  /**
   * Your password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  current_password: string;
  /**
   * New password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  new_password: string;
}

export interface ChangeSkinCharacterDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  skin: string;
  /** Player details. */
  character: CharacterSchema;
}

export interface ChangeSkinCharacterSchema {
  /** Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
  skin: CharacterSkin;
}

export interface ChangeSkinResponseSchema {
  data: ChangeSkinCharacterDataSchema;
}

export interface CharacterFightDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Fight details. */
  fight: FightSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface CharacterFightResponseSchema {
  data: CharacterFightDataSchema;
}

export interface CharacterLeaderboardSchema {
  /** Position in the leaderboard. */
  position: number;
  /** Character name. */
  name: string;
  /** Account name. */
  account: string;
  /** Member status. */
  status: AccountStatus;
  /** Character skin code. */
  skin: string;
  /** Combat level. */
  level: number;
  /** Total XP of your character. */
  total_xp: number;
  /** Mining level. */
  mining_level: number;
  /** Mining total xp. */
  mining_total_xp: number;
  /** Woodcutting level. */
  woodcutting_level: number;
  /** Woodcutting total xp. */
  woodcutting_total_xp: number;
  /** Fishing level. */
  fishing_level: number;
  /** Fishing total xp. */
  fishing_total_xp: number;
  /** Weaponcrafting level. */
  weaponcrafting_level: number;
  /** Weaponcrafting total xp. */
  weaponcrafting_total_xp: number;
  /** Gearcrafting level. */
  gearcrafting_level: number;
  /** Gearcrafting total xp. */
  gearcrafting_total_xp: number;
  /** Jewelrycrafting level. */
  jewelrycrafting_level: number;
  /** Jewelrycrafting total xp. */
  jewelrycrafting_total_xp: number;
  /** Cooking level. */
  cooking_level: number;
  /** Cooking total xp. */
  cooking_total_xp: number;
  /** Alchemy level. */
  alchemy_level: number;
  /** Alchemy total xp. */
  alchemy_total_xp: number;
  /** The numbers of gold on this character. */
  gold: number;
}

export type CharacterLeaderboardType =
  (typeof CharacterLeaderboardType)[keyof typeof CharacterLeaderboardType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharacterLeaderboardType = {
  combat: 'combat',
  woodcutting: 'woodcutting',
  mining: 'mining',
  fishing: 'fishing',
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  alchemy: 'alchemy',
} as const;

export type CharacterLeaderboardTypeAZAZ09 = CharacterLeaderboardType;

export interface CharacterMovementDataSchema {
  /** Cooldown details */
  cooldown: CooldownSchema;
  /** Destination details. */
  destination: MapSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface CharacterMovementResponseSchema {
  data: CharacterMovementDataSchema;
}

export interface CharacterResponseSchema {
  data: CharacterSchema;
}

export interface CharacterRestDataSchema {
  /** Cooldown details */
  cooldown: CooldownSchema;
  /** The amount of HP restored. */
  hp_restored: number;
  /** Character details. */
  character: CharacterSchema;
}

export interface CharacterRestResponseSchema {
  data: CharacterRestDataSchema;
}

export interface CharacterSchema {
  /** Name of the character. */
  name: string;
  /** Account name. */
  account: string;
  /** Character skin code. */
  skin: CharacterSkin;
  /** Combat level. */
  level: number;
  /** The current xp level of the combat level. */
  xp: number;
  /** XP required to level up the character. */
  max_xp: number;
  /** The numbers of gold on this character. */
  gold: number;
  /** *Not available, on the roadmap. Character movement speed. */
  speed: number;
  /** Mining level. */
  mining_level: number;
  /** The current xp level of the Mining skill. */
  mining_xp: number;
  /** Mining XP required to level up the skill. */
  mining_max_xp: number;
  /** Woodcutting level. */
  woodcutting_level: number;
  /** The current xp level of the Woodcutting skill. */
  woodcutting_xp: number;
  /** Woodcutting XP required to level up the skill. */
  woodcutting_max_xp: number;
  /** Fishing level. */
  fishing_level: number;
  /** The current xp level of the Fishing skill. */
  fishing_xp: number;
  /** Fishing XP required to level up the skill. */
  fishing_max_xp: number;
  /** Weaponcrafting level. */
  weaponcrafting_level: number;
  /** The current xp level of the Weaponcrafting skill. */
  weaponcrafting_xp: number;
  /** Weaponcrafting XP required to level up the skill. */
  weaponcrafting_max_xp: number;
  /** Gearcrafting level. */
  gearcrafting_level: number;
  /** The current xp level of the Gearcrafting skill. */
  gearcrafting_xp: number;
  /** Gearcrafting XP required to level up the skill. */
  gearcrafting_max_xp: number;
  /** Jewelrycrafting level. */
  jewelrycrafting_level: number;
  /** The current xp level of the Jewelrycrafting skill. */
  jewelrycrafting_xp: number;
  /** Jewelrycrafting XP required to level up the skill. */
  jewelrycrafting_max_xp: number;
  /** The current xp level of the Cooking skill. */
  cooking_level: number;
  /** Cooking XP. */
  cooking_xp: number;
  /** Cooking XP required to level up the skill. */
  cooking_max_xp: number;
  /** Alchemy level. */
  alchemy_level: number;
  /** Alchemy XP. */
  alchemy_xp: number;
  /** Alchemy XP required to level up the skill. */
  alchemy_max_xp: number;
  /** Character actual HP. */
  hp: number;
  /** Character max HP. */
  max_hp: number;
  /** *Increase speed attack (reduce fight cooldown) */
  haste: number;
  /** % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x). */
  critical_strike: number;
  /** Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom). */
  wisdom: number;
  /** Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP). */
  prospecting: number;
  /** Fire attack. */
  attack_fire: number;
  /** Earth attack. */
  attack_earth: number;
  /** Water attack. */
  attack_water: number;
  /** Air attack. */
  attack_air: number;
  /** % Damage. Damage increases your attack in all elements. */
  dmg: number;
  /** % Fire damage. Damage increases your fire attack. */
  dmg_fire: number;
  /** % Earth damage. Damage increases your earth attack. */
  dmg_earth: number;
  /** % Water damage. Damage increases your water attack. */
  dmg_water: number;
  /** % Air damage. Damage increases your air attack. */
  dmg_air: number;
  /** % Fire resistance. Reduces fire attack. */
  res_fire: number;
  /** % Earth resistance. Reduces earth attack. */
  res_earth: number;
  /** % Water resistance. Reduces water attack. */
  res_water: number;
  /** % Air resistance. Reduces air attack. */
  res_air: number;
  /** Character x coordinate. */
  x: number;
  /** Character y coordinate. */
  y: number;
  /** Cooldown in seconds. */
  cooldown: number;
  /** Datetime Cooldown expiration. */
  cooldown_expiration?: string;
  /** Weapon slot. */
  weapon_slot: string;
  /** Rune slot. */
  rune_slot: string;
  /** Shield slot. */
  shield_slot: string;
  /** Helmet slot. */
  helmet_slot: string;
  /** Body armor slot. */
  body_armor_slot: string;
  /** Leg armor slot. */
  leg_armor_slot: string;
  /** Boots slot. */
  boots_slot: string;
  /** Ring 1 slot. */
  ring1_slot: string;
  /** Ring 2 slot. */
  ring2_slot: string;
  /** Amulet slot. */
  amulet_slot: string;
  /** Artifact 1 slot. */
  artifact1_slot: string;
  /** Artifact 2 slot. */
  artifact2_slot: string;
  /** Artifact 3 slot. */
  artifact3_slot: string;
  /** Utility 1 slot. */
  utility1_slot: string;
  /**
   * Utility 1 quantity.
   * @minimum 0
   */
  utility1_slot_quantity: number;
  /** Utility 2 slot. */
  utility2_slot: string;
  /**
   * Utility 2 quantity.
   * @minimum 0
   */
  utility2_slot_quantity: number;
  /** Bag slot. */
  bag_slot: string;
  /** Task in progress. */
  task: string;
  /** Task type. */
  task_type: string;
  /** Task progression. */
  task_progress: number;
  /** Task total objective. */
  task_total: number;
  /** Inventory max items. */
  inventory_max_items: number;
  /** List of inventory slots. */
  inventory?: InventorySlot[];
}

export type CharacterSkin = (typeof CharacterSkin)[keyof typeof CharacterSkin];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharacterSkin = {
  men1: 'men1',
  men2: 'men2',
  men3: 'men3',
  women1: 'women1',
  women2: 'women2',
  women3: 'women3',
  corrupted1: 'corrupted1',
  zombie1: 'zombie1',
} as const;

export interface CharactersListSchema {
  /** List of your characters. */
  data: CharacterSchema[];
}

export type ConditionOperator =
  (typeof ConditionOperator)[keyof typeof ConditionOperator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConditionOperator = {
  eq: 'eq',
  ne: 'ne',
  gt: 'gt',
  lt: 'lt',
} as const;

export interface ConditionSchema {
  /** Condition code. */
  code: string;
  /** Condition operator. */
  operator: ConditionOperator;
  /** Condition value. */
  value: number;
}

export interface CooldownSchema {
  /** The total seconds of the cooldown. */
  total_seconds: number;
  /** The remaining seconds of the cooldown. */
  remaining_seconds: number;
  /** The start of the cooldown. */
  started_at: string;
  /** The expiration of the cooldown. */
  expiration: string;
  /** The reason of the cooldown. */
  reason: ActionType;
}

export interface CraftSchema {
  /** Skill required to craft the item. */
  skill?: CraftSkill;
  /** The skill level required to craft the item. */
  level?: number;
  /** List of items required to craft the item. */
  items?: SimpleItemSchema[];
  /** Quantity of items crafted. */
  quantity?: number;
}

export type CraftSkill = (typeof CraftSkill)[keyof typeof CraftSkill];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CraftSkill = {
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  woodcutting: 'woodcutting',
  mining: 'mining',
  alchemy: 'alchemy',
} as const;

export type CraftSkillAZAZ09 = CraftSkill;

export interface CraftingSchema {
  /**
   * Craft code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Quantity of items to craft.
   * @minimum 1
   */
  quantity?: number;
}

export type DataPageAccountAchievementSchemaTotal = number | null;

export type DataPageAccountAchievementSchemaPage = number | null;

export type DataPageAccountAchievementSchemaSize = number | null;

export type DataPageAccountAchievementSchemaPages = number | null;

export interface DataPageAccountAchievementSchema {
  data: AccountAchievementSchema[];
  total: DataPageAccountAchievementSchemaTotal;
  page: DataPageAccountAchievementSchemaPage;
  size: DataPageAccountAchievementSchemaSize;
  pages?: DataPageAccountAchievementSchemaPages;
}

export type DataPageAccountLeaderboardSchemaTotal = number | null;

export type DataPageAccountLeaderboardSchemaPage = number | null;

export type DataPageAccountLeaderboardSchemaSize = number | null;

export type DataPageAccountLeaderboardSchemaPages = number | null;

export interface DataPageAccountLeaderboardSchema {
  data: AccountLeaderboardSchema[];
  total: DataPageAccountLeaderboardSchemaTotal;
  page: DataPageAccountLeaderboardSchemaPage;
  size: DataPageAccountLeaderboardSchemaSize;
  pages?: DataPageAccountLeaderboardSchemaPages;
}

export type DataPageAchievementSchemaTotal = number | null;

export type DataPageAchievementSchemaPage = number | null;

export type DataPageAchievementSchemaSize = number | null;

export type DataPageAchievementSchemaPages = number | null;

export interface DataPageAchievementSchema {
  data: AchievementSchema[];
  total: DataPageAchievementSchemaTotal;
  page: DataPageAchievementSchemaPage;
  size: DataPageAchievementSchemaSize;
  pages?: DataPageAchievementSchemaPages;
}

export type DataPageActiveEventSchemaTotal = number | null;

export type DataPageActiveEventSchemaPage = number | null;

export type DataPageActiveEventSchemaSize = number | null;

export type DataPageActiveEventSchemaPages = number | null;

export interface DataPageActiveEventSchema {
  data: ActiveEventSchema[];
  total: DataPageActiveEventSchemaTotal;
  page: DataPageActiveEventSchemaPage;
  size: DataPageActiveEventSchemaSize;
  pages?: DataPageActiveEventSchemaPages;
}

export type DataPageBadgeSchemaTotal = number | null;

export type DataPageBadgeSchemaPage = number | null;

export type DataPageBadgeSchemaSize = number | null;

export type DataPageBadgeSchemaPages = number | null;

export interface DataPageBadgeSchema {
  data: BadgeSchema[];
  total: DataPageBadgeSchemaTotal;
  page: DataPageBadgeSchemaPage;
  size: DataPageBadgeSchemaSize;
  pages?: DataPageBadgeSchemaPages;
}

export type DataPageCharacterLeaderboardSchemaTotal = number | null;

export type DataPageCharacterLeaderboardSchemaPage = number | null;

export type DataPageCharacterLeaderboardSchemaSize = number | null;

export type DataPageCharacterLeaderboardSchemaPages = number | null;

export interface DataPageCharacterLeaderboardSchema {
  data: CharacterLeaderboardSchema[];
  total: DataPageCharacterLeaderboardSchemaTotal;
  page: DataPageCharacterLeaderboardSchemaPage;
  size: DataPageCharacterLeaderboardSchemaSize;
  pages?: DataPageCharacterLeaderboardSchemaPages;
}

export type DataPageDropRateSchemaTotal = number | null;

export type DataPageDropRateSchemaPage = number | null;

export type DataPageDropRateSchemaSize = number | null;

export type DataPageDropRateSchemaPages = number | null;

export interface DataPageDropRateSchema {
  data: DropRateSchema[];
  total: DataPageDropRateSchemaTotal;
  page: DataPageDropRateSchemaPage;
  size: DataPageDropRateSchemaSize;
  pages?: DataPageDropRateSchemaPages;
}

export type DataPageEffectSchemaTotal = number | null;

export type DataPageEffectSchemaPage = number | null;

export type DataPageEffectSchemaSize = number | null;

export type DataPageEffectSchemaPages = number | null;

export interface DataPageEffectSchema {
  data: EffectSchema[];
  total: DataPageEffectSchemaTotal;
  page: DataPageEffectSchemaPage;
  size: DataPageEffectSchemaSize;
  pages?: DataPageEffectSchemaPages;
}

export type DataPageEventSchemaTotal = number | null;

export type DataPageEventSchemaPage = number | null;

export type DataPageEventSchemaSize = number | null;

export type DataPageEventSchemaPages = number | null;

export interface DataPageEventSchema {
  data: EventSchema[];
  total: DataPageEventSchemaTotal;
  page: DataPageEventSchemaPage;
  size: DataPageEventSchemaSize;
  pages?: DataPageEventSchemaPages;
}

export type DataPageGEOrderSchemaTotal = number | null;

export type DataPageGEOrderSchemaPage = number | null;

export type DataPageGEOrderSchemaSize = number | null;

export type DataPageGEOrderSchemaPages = number | null;

export interface DataPageGEOrderSchema {
  data: GEOrderSchema[];
  total: DataPageGEOrderSchemaTotal;
  page: DataPageGEOrderSchemaPage;
  size: DataPageGEOrderSchemaSize;
  pages?: DataPageGEOrderSchemaPages;
}

export type DataPageGeOrderHistorySchemaTotal = number | null;

export type DataPageGeOrderHistorySchemaPage = number | null;

export type DataPageGeOrderHistorySchemaSize = number | null;

export type DataPageGeOrderHistorySchemaPages = number | null;

export interface DataPageGeOrderHistorySchema {
  data: GeOrderHistorySchema[];
  total: DataPageGeOrderHistorySchemaTotal;
  page: DataPageGeOrderHistorySchemaPage;
  size: DataPageGeOrderHistorySchemaSize;
  pages?: DataPageGeOrderHistorySchemaPages;
}

export type DataPageItemSchemaTotal = number | null;

export type DataPageItemSchemaPage = number | null;

export type DataPageItemSchemaSize = number | null;

export type DataPageItemSchemaPages = number | null;

export interface DataPageItemSchema {
  data: ItemSchema[];
  total: DataPageItemSchemaTotal;
  page: DataPageItemSchemaPage;
  size: DataPageItemSchemaSize;
  pages?: DataPageItemSchemaPages;
}

export type DataPageLogSchemaTotal = number | null;

export type DataPageLogSchemaPage = number | null;

export type DataPageLogSchemaSize = number | null;

export type DataPageLogSchemaPages = number | null;

export interface DataPageLogSchema {
  data: LogSchema[];
  total: DataPageLogSchemaTotal;
  page: DataPageLogSchemaPage;
  size: DataPageLogSchemaSize;
  pages?: DataPageLogSchemaPages;
}

export type DataPageMapSchemaTotal = number | null;

export type DataPageMapSchemaPage = number | null;

export type DataPageMapSchemaSize = number | null;

export type DataPageMapSchemaPages = number | null;

export interface DataPageMapSchema {
  data: MapSchema[];
  total: DataPageMapSchemaTotal;
  page: DataPageMapSchemaPage;
  size: DataPageMapSchemaSize;
  pages?: DataPageMapSchemaPages;
}

export type DataPageMonsterSchemaTotal = number | null;

export type DataPageMonsterSchemaPage = number | null;

export type DataPageMonsterSchemaSize = number | null;

export type DataPageMonsterSchemaPages = number | null;

export interface DataPageMonsterSchema {
  data: MonsterSchema[];
  total: DataPageMonsterSchemaTotal;
  page: DataPageMonsterSchemaPage;
  size: DataPageMonsterSchemaSize;
  pages?: DataPageMonsterSchemaPages;
}

export type DataPageNPCItemTotal = number | null;

export type DataPageNPCItemPage = number | null;

export type DataPageNPCItemSize = number | null;

export type DataPageNPCItemPages = number | null;

export interface DataPageNPCItem {
  data: NPCItem[];
  total: DataPageNPCItemTotal;
  page: DataPageNPCItemPage;
  size: DataPageNPCItemSize;
  pages?: DataPageNPCItemPages;
}

export type DataPageNPCSchemaTotal = number | null;

export type DataPageNPCSchemaPage = number | null;

export type DataPageNPCSchemaSize = number | null;

export type DataPageNPCSchemaPages = number | null;

export interface DataPageNPCSchema {
  data: NPCSchema[];
  total: DataPageNPCSchemaTotal;
  page: DataPageNPCSchemaPage;
  size: DataPageNPCSchemaSize;
  pages?: DataPageNPCSchemaPages;
}

export type DataPageResourceSchemaTotal = number | null;

export type DataPageResourceSchemaPage = number | null;

export type DataPageResourceSchemaSize = number | null;

export type DataPageResourceSchemaPages = number | null;

export interface DataPageResourceSchema {
  data: ResourceSchema[];
  total: DataPageResourceSchemaTotal;
  page: DataPageResourceSchemaPage;
  size: DataPageResourceSchemaSize;
  pages?: DataPageResourceSchemaPages;
}

export type DataPageSimpleItemSchemaTotal = number | null;

export type DataPageSimpleItemSchemaPage = number | null;

export type DataPageSimpleItemSchemaSize = number | null;

export type DataPageSimpleItemSchemaPages = number | null;

export interface DataPageSimpleItemSchema {
  data: SimpleItemSchema[];
  total: DataPageSimpleItemSchemaTotal;
  page: DataPageSimpleItemSchemaPage;
  size: DataPageSimpleItemSchemaSize;
  pages?: DataPageSimpleItemSchemaPages;
}

export type DataPageTaskFullSchemaTotal = number | null;

export type DataPageTaskFullSchemaPage = number | null;

export type DataPageTaskFullSchemaSize = number | null;

export type DataPageTaskFullSchemaPages = number | null;

export interface DataPageTaskFullSchema {
  data: TaskFullSchema[];
  total: DataPageTaskFullSchemaTotal;
  page: DataPageTaskFullSchemaPage;
  size: DataPageTaskFullSchemaSize;
  pages?: DataPageTaskFullSchemaPages;
}

export interface DeleteCharacterSchema {
  /**
   * Character name.
   * @minLength 3
   * @maxLength 12
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  name: string;
}

export interface DeleteItemResponseSchema {
  data: DeleteItemSchema;
}

export interface DeleteItemSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item details. */
  item: SimpleItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface DepositWithdrawGoldSchema {
  /**
   * Quantity of gold.
   * @minimum 1
   */
  quantity: number;
}

export interface DestinationSchema {
  /** The x coordinate of the destination. */
  x: number;
  /** The y coordinate of the destination. */
  y: number;
}

export interface DropRateSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Chance rate. (1/rate)
   * @minimum 1
   */
  rate: number;
  /**
   * Minimum quantity.
   * @minimum 1
   */
  min_quantity: number;
  /**
   * Maximum quantity.
   * @minimum 1
   */
  max_quantity: number;
}

export interface DropSchema {
  /** The code of the item. */
  code: string;
  /** The quantity of the item. */
  quantity: number;
}

export interface EffectResponseSchema {
  data: EffectSchema;
}

export interface EffectSchema {
  /** Name of the effect. */
  name: string;
  /** The code of the effect. This is the effect's unique identifier (ID). */
  code: string;
  /** Description of the effect. This is a brief description of the effect. */
  description: string;
  /** Type of the effect. */
  type: EffectType;
  /** Subtype of the effect. */
  subtype: EffectSubtype;
}

export type EffectSubtype = (typeof EffectSubtype)[keyof typeof EffectSubtype];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EffectSubtype = {
  stat: 'stat',
  other: 'other',
  heal: 'heal',
  buff: 'buff',
  debuff: 'debuff',
  special: 'special',
  gathering: 'gathering',
  teleport: 'teleport',
  gold: 'gold',
} as const;

export type EffectType = (typeof EffectType)[keyof typeof EffectType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EffectType = {
  equipment: 'equipment',
  consumable: 'consumable',
  combat: 'combat',
} as const;

export interface EquipRequestSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item slot. */
  slot: ItemSlot;
  /** Item details. */
  item: ItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface EquipSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /** Item slot. */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilities only.
   * @minimum 1
   * @maximum 100
   */
  quantity?: number;
}

export interface EquipmentResponseSchema {
  data: EquipRequestSchema;
}

export interface EventContentSchema {
  /** Type of the event. */
  type: MapContentType;
  /** Code content. */
  code: string;
}

export interface EventMapSchema {
  /** Position X of the map. */
  x: number;
  /** Position Y of the map. */
  y: number;
  /** Map skin of the map */
  skin: string;
}

export interface EventSchema {
  /** Name of the event. */
  name: string;
  /** Code of the event. */
  code: string;
  /** Content of the event. */
  content: EventContentSchema;
  /** Map list of the event. */
  maps: EventMapSchema[];
  /** Duration in minutes. */
  duration: number;
  /** Rate spawn of the event. (1/rate every minute) */
  rate: number;
}

export type FightResult = (typeof FightResult)[keyof typeof FightResult];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FightResult = {
  win: 'win',
  loss: 'loss',
} as const;

export interface FightSchema {
  /** The amount of xp gained from the fight. */
  xp: number;
  /** The amount of gold gained from the fight. */
  gold: number;
  /** The items dropped from the fight. */
  drops: DropSchema[];
  /** Numbers of the turns of the combat. */
  turns: number;
  /** The fight logs. */
  logs: string[];
  /** The result of the fight. */
  result: FightResult;
}

export interface GEBuyOrderSchema {
  /** Order id. */
  id: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
}

export interface GECancelOrderSchema {
  /** Order id. */
  id: string;
}

export interface GECreateOrderTransactionResponseSchema {
  data: GEOrderTransactionSchema;
}

export interface GEOrderCreatedSchema {
  /** Order id. */
  id: string;
  /** Order created at. */
  created_at: string;
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /**
   * Total price.
   * @minimum 1
   */
  total_price: number;
  /**
   * Listing tax (3%, minimum 1)
   * @minimum 1
   */
  tax: number;
}

export interface GEOrderCreationrSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   * @maximum 1000000000
   */
  price: number;
}

export interface GEOrderReponseSchema {
  data: GEOrderSchema;
}

export interface GEOrderSchema {
  /** Order id. */
  id: string;
  /** Seller account name. */
  seller: string;
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /** Order created at. */
  created_at: string;
}

export interface GEOrderTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Order details. */
  order: GEOrderCreatedSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GETransactionListSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  order: GETransactionSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GETransactionResponseSchema {
  data: GETransactionListSchema;
}

export interface GETransactionSchema {
  /** Order id. */
  id: string;
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
  /** Item price. */
  price: number;
  /** Total price of the transaction. */
  total_price: number;
}

export type GatheringSkill =
  (typeof GatheringSkill)[keyof typeof GatheringSkill];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GatheringSkill = {
  mining: 'mining',
  woodcutting: 'woodcutting',
  fishing: 'fishing',
  alchemy: 'alchemy',
} as const;

export type GatheringSkillAZAZ09 = GatheringSkill;

export interface GeOrderHistorySchema {
  /** Order id. */
  order_id: string;
  /** Seller account name. */
  seller: string;
  /** Buyer account name. */
  buyer: string;
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /** Sale datetime. */
  sold_at: string;
}

export interface GiveGoldDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /**
   * Quantity of gold given.
   * @minimum 1
   * @maximum 1000000
   */
  quantity: number;
  /** Character details of the receiving character. */
  receiver_character: CharacterSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GiveGoldReponseSchema {
  data: GiveGoldDataSchema;
}

export interface GiveGoldSchema {
  /**
   * Gold quantity.
   * @minimum 1
   */
  quantity: number;
  /**
   * Character name. The name of the character who will receive the gold.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  character: string;
}

export interface GiveItemDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Items given. */
  items: SimpleItemSchema[];
  /** Character details of the receiving character. */
  receiver_character: CharacterSchema;
  /** Character details of the sending character. */
  character: CharacterSchema;
}

export interface GiveItemReponseSchema {
  data: GiveItemDataSchema;
}

export interface GiveItemsSchema {
  /**
   * List of items to give
   * @minItems 1
   * @maxItems 20
   */
  items: SimpleItemSchema[];
  /**
   * Character name. The name of the character who will receive the items.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  character: string;
}

export interface GoldSchema {
  /**
   * Quantity of gold.
   * @minimum 0
   */
  quantity: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface InventorySlot {
  /** Inventory slot identifier. */
  slot: number;
  /** Item code. */
  code: string;
  /** Quantity in the slot. */
  quantity: number;
}

export interface ItemResponseSchema {
  data: ItemSchema;
}

/**
 * Craft information. If applicable.
 */
export type ItemSchemaCraft = CraftSchema | null;

export interface ItemSchema {
  /** Item name. */
  name: string;
  /** Item code. This is the item's unique identifier (ID). */
  code: string;
  /**
   * Item level.
   * @minimum 1
   */
  level: number;
  /** Item type. */
  type: string;
  /** Item subtype. */
  subtype: string;
  /** Item description. */
  description: string;
  /** Item conditions. If applicable. Conditions for using or equipping the item. */
  conditions?: ConditionSchema[];
  /** List of object effects. For equipment, it will include item stats. */
  effects?: SimpleEffectSchema[];
  /** Craft information. If applicable. */
  craft?: ItemSchemaCraft;
  /** Item tradeable status. A non-tradeable item cannot be exchanged or sold. */
  tradeable: boolean;
}

export type ItemSlot = (typeof ItemSlot)[keyof typeof ItemSlot];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemSlot = {
  weapon: 'weapon',
  shield: 'shield',
  helmet: 'helmet',
  body_armor: 'body_armor',
  leg_armor: 'leg_armor',
  boots: 'boots',
  ring1: 'ring1',
  ring2: 'ring2',
  amulet: 'amulet',
  artifact1: 'artifact1',
  artifact2: 'artifact2',
  artifact3: 'artifact3',
  utility1: 'utility1',
  utility2: 'utility2',
  bag: 'bag',
  rune: 'rune',
} as const;

export type ItemType = (typeof ItemType)[keyof typeof ItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemType = {
  utility: 'utility',
  body_armor: 'body_armor',
  weapon: 'weapon',
  resource: 'resource',
  leg_armor: 'leg_armor',
  helmet: 'helmet',
  boots: 'boots',
  shield: 'shield',
  amulet: 'amulet',
  ring: 'ring',
  artifact: 'artifact',
  currency: 'currency',
  consumable: 'consumable',
  rune: 'rune',
  bag: 'bag',
} as const;

export type ItemTypeAZAZ09 = ItemType;

/**
 * Datetime of cooldown expiration.
 */
export type LogSchemaCooldownExpiration = string | null;

export interface LogSchema {
  /** Character name. */
  character: string;
  /** Account character. */
  account: string;
  /** Type of action. */
  type: LogType;
  /** Description of action. */
  description: string;
  /** Content of action. */
  content: unknown;
  /** Cooldown in seconds. */
  cooldown: number;
  /** Datetime of cooldown expiration. */
  cooldown_expiration: LogSchemaCooldownExpiration;
  /** Datetime of creation. */
  created_at: string;
}

export type LogType = (typeof LogType)[keyof typeof LogType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogType = {
  spawn: 'spawn',
  movement: 'movement',
  fight: 'fight',
  crafting: 'crafting',
  gathering: 'gathering',
  buy_ge: 'buy_ge',
  sell_ge: 'sell_ge',
  buy_npc: 'buy_npc',
  sell_npc: 'sell_npc',
  cancel_ge: 'cancel_ge',
  delete_item: 'delete_item',
  deposit_item: 'deposit_item',
  withdraw_item: 'withdraw_item',
  deposit_gold: 'deposit_gold',
  withdraw_gold: 'withdraw_gold',
  equip: 'equip',
  unequip: 'unequip',
  new_task: 'new_task',
  task_exchange: 'task_exchange',
  task_cancelled: 'task_cancelled',
  task_completed: 'task_completed',
  task_trade: 'task_trade',
  christmas_exchange: 'christmas_exchange',
  recycling: 'recycling',
  rest: 'rest',
  use: 'use',
  buy_bank_expansion: 'buy_bank_expansion',
  achievement: 'achievement',
  give_item: 'give_item',
  give_gold: 'give_gold',
  receive_item: 'receive_item',
  receive_gold: 'receive_gold',
  change_skin: 'change_skin',
  rename: 'rename',
} as const;

export interface MapContentSchema {
  /** Type of the content. */
  type: MapContentType;
  /** Code of the content. */
  code: string;
}

export type MapContentType =
  (typeof MapContentType)[keyof typeof MapContentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapContentType = {
  monster: 'monster',
  resource: 'resource',
  workshop: 'workshop',
  bank: 'bank',
  grand_exchange: 'grand_exchange',
  tasks_master: 'tasks_master',
  npc: 'npc',
} as const;

export type MapContentTypeAZAZ09 = MapContentType;

export interface MapResponseSchema {
  data: MapSchema;
}

/**
 * Content of the map.
 */
export type MapSchemaContent = MapContentSchema | null;

export interface MapSchema {
  /** Name of the map. */
  name: string;
  /** Skin of the map. */
  skin: string;
  /** Position X of the map. */
  x: number;
  /** Position Y of the map. */
  y: number;
  /** Content of the map. */
  content: MapSchemaContent;
}

export interface MonsterResponseSchema {
  data: MonsterSchema;
}

export interface MonsterSchema {
  /** Name of the monster. */
  name: string;
  /** The code of the monster. This is the monster's unique identifier (ID). */
  code: string;
  /** Monster level. */
  level: number;
  /** Monster hit points. */
  hp: number;
  /** Monster fire attack. */
  attack_fire: number;
  /** Monster earth attack. */
  attack_earth: number;
  /** Monster water attack. */
  attack_water: number;
  /** Monster air attack. */
  attack_air: number;
  /** Monster % fire resistance. */
  res_fire: number;
  /** Monster % earth resistance. */
  res_earth: number;
  /** Monster % water resistance. */
  res_water: number;
  /** Monster % air resistance. */
  res_air: number;
  /** Monster % critical strike. */
  critical_strike: number;
  /** List of effects. */
  effects?: SimpleEffectSchema[];
  /** Monster minimum gold drop.  */
  min_gold: number;
  /** Monster maximum gold drop.  */
  max_gold: number;
  /** Monster drops. This is a list of items that the monster drops after killing the monster.  */
  drops: DropRateSchema[];
}

/**
 * Member expiration date.
 */
export type MyAccountDetailsMemberExpiration = string | null;

export interface MyAccountDetails {
  /** Username. */
  username: string;
  /** Email. */
  email: string;
  /** Member status. */
  member: boolean;
  /** Member expiration date. */
  member_expiration?: MyAccountDetailsMemberExpiration;
  /** Account status. */
  status: AccountStatus;
  /** Account badges. */
  badges?: unknown[];
  /** Skins owned. */
  skins: unknown[];
  /** Gems. */
  gems: number;
  /** Achievement points. */
  achievements_points: number;
  /** Banned. */
  banned: boolean;
  /** Ban reason. */
  ban_reason?: string;
}

export interface MyAccountDetailsSchema {
  data: MyAccountDetails;
}

export interface MyCharactersListSchema {
  /** List of your characters. */
  data: CharacterSchema[];
}

/**
 * Price to buy the item.
 */
export type NPCItemBuyPrice = number | null;

/**
 * Price to sell the item.
 */
export type NPCItemSellPrice = number | null;

export interface NPCItem {
  /** The code of the NPC. This is the NPC's unique identifier (ID). */
  code: string;
  /** Code of the NPC that sells/buys the item. */
  npc: string;
  /** Currency used to buy/sell the item. If it's not gold, it's the item code. */
  currency: string;
  /** Price to buy the item. */
  buy_price: NPCItemBuyPrice;
  /** Price to sell the item. */
  sell_price: NPCItemSellPrice;
}

export interface NPCResponseSchema {
  data: NPCSchema;
}

export interface NPCSchema {
  /** Name of the NPC. */
  name: string;
  /** The code of the NPC. This is the NPC's unique identifier (ID). */
  code: string;
  /** Description of the NPC. */
  description: string;
  /** Type of the NPC. */
  type: NPCType;
}

export type NPCType = (typeof NPCType)[keyof typeof NPCType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NPCType = {
  merchant: 'merchant',
  trader: 'trader',
} as const;

export type NPCTypeAZAZ09 = NPCType;

export interface NpcItemTransactionSchema {
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
  /** Currency used for the transaction. */
  currency: string;
  /** Item price. */
  price: number;
  /** Total price of the transaction. */
  total_price: number;
}

export interface NpcMerchantBuySchema {
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
}

export interface NpcMerchantTransactionResponseSchema {
  data: NpcMerchantTransactionSchema;
}

export interface NpcMerchantTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  transaction: NpcItemTransactionSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface PasswordResetConfirmSchema {
  /** Password reset token. */
  token: string;
  /**
   * Your new password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  new_password: string;
}

export interface PasswordResetRequestSchema {
  /** Your email address. */
  email: string;
}

export interface PasswordResetResponseSchema {
  /** Success message. */
  message: string;
}

export interface RateLimitSchema {
  /** Type of rate limit. */
  type: string;
  /** Value of the rate limit. */
  value: string;
}

export interface RecyclingDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  details: RecyclingItemsSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface RecyclingItemsSchema {
  /** Objects received. */
  items: DropSchema[];
}

export interface RecyclingResponseSchema {
  data: RecyclingDataSchema;
}

export interface RecyclingSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Quantity of items to recycle.
   * @minimum 1
   */
  quantity?: number;
}

export interface ResourceResponseSchema {
  data: ResourceSchema;
}

export interface ResourceSchema {
  /** The name of the resource */
  name: string;
  /** The code of the resource. This is the resource's unique identifier (ID). */
  code: string;
  /** The skill required to gather this resource. */
  skill: GatheringSkill;
  /** The skill level required to gather this resource. */
  level: number;
  /** The drops of this resource. */
  drops: DropRateSchema[];
}

export interface ResponseSchema {
  message: string;
}

export interface RewardDataResponseSchema {
  data: RewardDataSchema;
}

export interface RewardDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Reward details. */
  rewards: RewardsSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface RewardResponseSchema {
  data: DropRateSchema;
}

export interface RewardsSchema {
  /** Items rewards. */
  items: SimpleItemSchema[];
  /** Gold rewards. */
  gold: number;
}

export interface SeasonBadgeSchema {
  /** Badge code. */
  code: string;
  /** Badge description. */
  description: string;
  /** Required achievement points to earn the badge. */
  required_points: number;
}

export interface SeasonSchema {
  /** Season name. */
  name?: string;
  /** Season number. */
  number?: number;
  /** Season start date. */
  start_date?: string;
  /** Season badges with required achievement points. */
  badges: SeasonBadgeSchema[];
  /** Season skins with required achievement points. */
  skins: SeasonSkinSchema[];
}

export interface SeasonSkinSchema {
  /** Skin code. */
  code: string;
  /** Skin description. */
  description: string;
  /** Required achievement points to earn the skin. */
  required_points: number;
}

export interface SimpleEffectSchema {
  /**
   * Effect code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /** Effect value. */
  value: number;
  /** Description of the effect. */
  description: string;
}

export interface SimpleItemSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   */
  quantity: number;
}

export type Skill = (typeof Skill)[keyof typeof Skill];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Skill = {
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  woodcutting: 'woodcutting',
  mining: 'mining',
  alchemy: 'alchemy',
  fishing: 'fishing',
} as const;

export interface SkillDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  details: SkillInfoSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface SkillInfoSchema {
  /** The amount of xp gained. */
  xp: number;
  /** Objects received. */
  items: DropSchema[];
}

export interface SkillResponseSchema {
  data: SkillDataSchema;
}

export type SkillAZAZ09 = Skill;

export interface StatusResponseSchema {
  data: StatusSchema;
}

export interface StatusSchema {
  /** Game version. */
  version: string;
  /** Server time. */
  server_time: string;
  /** Maximum level. */
  max_level: number;
  /** Maximum skill level. */
  max_skill_level: number;
  /** Characters online. */
  characters_online: number;
  /** Current season details. */
  season?: SeasonSchema;
  /** Server announcements. */
  announcements: AnnouncementSchema[];
  /** Rate limits. */
  rate_limits: RateLimitSchema[];
}

export interface TaskCancelledResponseSchema {
  data: TaskCancelledSchema;
}

export interface TaskCancelledSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Task details. */
  task: TaskSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskFullResponseSchema {
  data: TaskFullSchema;
}

/**
 * Skill required to complete the task.
 */
export type TaskFullSchemaSkill = string | null;

export interface TaskFullSchema {
  /** Task objective. */
  code: string;
  /** Task level. */
  level: number;
  /** The type of task. */
  type: TaskType;
  /** Minimum amount of task. */
  min_quantity: number;
  /** Maximum amount of task. */
  max_quantity: number;
  /** Skill required to complete the task. */
  skill: TaskFullSchemaSkill;
  /** Rewards. */
  rewards: RewardsSchema;
}

export interface TaskResponseSchema {
  data: TaskDataSchema;
}

export interface TaskSchema {
  /** Task objective. */
  code: string;
  /** The type of task. */
  type: TaskType;
  /** The total required to complete the task. */
  total: number;
  /** Rewards for completing the task. */
  rewards: RewardsSchema;
}

export interface TaskTradeDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Reward details. */
  trade: TaskTradeSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskTradeResponseSchema {
  data: TaskTradeDataSchema;
}

export interface TaskTradeSchema {
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
}

export type TaskType = (typeof TaskType)[keyof typeof TaskType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskType = {
  monsters: 'monsters',
  items: 'items',
} as const;

export type TaskTypeAZAZ09 = TaskType;

export interface TokenResponseSchema {
  token: string;
}

export interface UnequipSchema {
  /** Item slot. */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilities only.
   * @minimum 1
   * @maximum 100
   */
  quantity?: number;
}

export interface UseItemResponseSchema {
  data: UseItemSchema;
}

export interface UseItemSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item details. */
  item: ItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type GetBankItemsMyBankItemsGetParams = {
  /**
   * Item to search in your bank.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  item_code?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetGeSellOrdersMyGrandexchangeOrdersGetParams = {
  /**
   * The code of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetGeSellHistoryMyGrandexchangeHistoryGetParams = {
  /**
   * Order ID to search in your history.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  id?: string;
  /**
   * Item to search in your history.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllCharactersLogsMyLogsGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetCharacterLogsMyLogsNameGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAccountAchievementsAccountsAccountAchievementsGetParams = {
  /**
   * Type of achievements.
   */
  type?: AchievementType;
  /**
   * Filter by completed achievements.
   */
  completed?: boolean;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllAchievementsAchievementsGetParams = {
  /**
   * Type of achievements.
   */
  type?: AchievementType;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllBadgesBadgesGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllEffectsEffectsGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllActiveEventsEventsActiveGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllEventsEventsGetParams = {
  /**
   * Type of event.
   */
  type?: MapContentType;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetGeSellHistoryGrandexchangeHistoryCodeGetParams = {
  /**
   * The seller (account name) of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  seller?: string;
  /**
   * The buyer (account name) of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  buyer?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetGeSellOrdersGrandexchangeOrdersGetParams = {
  /**
   * The code of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code?: string;
  /**
   * The seller (account name) of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  seller?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllItemsItemsGetParams = {
  /**
   * Name of the item.
   * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
   */
  name?: string;
  /**
   * Minimum level items.
   * @minimum 0
   */
  min_level?: number;
  /**
   * Maximum level items.
   * @minimum 0
   */
  max_level?: number;
  /**
   * Type of items.
   */
  type?: ItemType;
  /**
   * Skill to craft items.
   */
  craft_skill?: CraftSkill;
  /**
   * Item code of items used as material for crafting.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  craft_material?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetCharactersLeaderboardLeaderboardCharactersGetParams = {
  /**
   * Default sort by combat total XP.
   */
  sort?: CharacterLeaderboardType;
  /**
   * Find a character by name.
   * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
   */
  name?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAccountsLeaderboardLeaderboardAccountsGetParams = {
  /**
   * Default sort by achievements points.
   */
  sort?: AccountLeaderboardType;
  /**
   * Find a account by name.
   * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
   */
  name?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllMapsMapsGetParams = {
  /**
   * Type of content on the map.
   */
  content_type?: MapContentType;
  /**
   * Content code on the map.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  content_code?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllMonstersMonstersGetParams = {
  /**
   * Name of the monster.
   * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
   */
  name?: string;
  /**
   * Monster minimum level.
   * @minimum 0
   */
  min_level?: number;
  /**
   * Monster maximum level.
   * @minimum 0
   */
  max_level?: number;
  /**
   * Item code of the drop.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  drop?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllNpcsNpcsDetailsGetParams = {
  /**
   * Name of the npc.
   * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
   */
  name?: string;
  /**
   * The type of the NPC.
   */
  type?: NPCType;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetNpcItemsNpcsItemsCodeGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllNpcsItemsNpcsItemsGetParams = {
  /**
   * The code of the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code?: string;
  /**
   * The code of the npc.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  npc?: string;
  /**
   * The code of the currency.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  currency?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllResourcesResourcesGetParams = {
  /**
   * Skill minimum level.
   * @minimum 0
   */
  min_level?: number;
  /**
   * Skill maximum level.
   * @minimum 0
   */
  max_level?: number;
  /**
   * The code of the skill.
   */
  skill?: GatheringSkill;
  /**
   * Item code of the drop.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  drop?: string;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllTasksTasksListGetParams = {
  /**
   * Minimum level.
   * @minimum 0
   */
  min_level?: number;
  /**
   * Maximum level.
   * @minimum 0
   */
  max_level?: number;
  /**
   * The code of the skill.
   */
  skill?: Skill;
  /**
   * The type of tasks.
   */
  type?: TaskType;
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

export type GetAllTasksRewardsTasksRewardsGetParams = {
  /**
   * Page number
   * @minimum 1
   */
  page?: number;
  /**
   * Page size
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

/**
 * Return the status of the game server.
 * @summary Get Server Details
 */
export const getServerDetailsGet = <
  TData = AxiosResponse<StatusResponseSchema>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/`, options);
};

/**
 * Fetch bank details.
 * @summary Get Bank Details
 */
export const getBankDetailsMyBankGet = <
  TData = AxiosResponse<BankResponseSchema>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/bank`, options);
};

/**
 * Fetch all items in your bank.
 * @summary Get Bank Items
 */
export const getBankItemsMyBankItemsGet = <
  TData = AxiosResponse<DataPageSimpleItemSchema>,
>(
  params?: GetBankItemsMyBankItemsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/bank/items`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch your sell orders details.
 * @summary Get Ge Sell Orders
 */
export const getGeSellOrdersMyGrandexchangeOrdersGet = <
  TData = AxiosResponse<DataPageGEOrderSchema>,
>(
  params?: GetGeSellOrdersMyGrandexchangeOrdersGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/grandexchange/orders`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch your sales history of the last 7 days.
 * @summary Get Ge Sell History
 */
export const getGeSellHistoryMyGrandexchangeHistoryGet = <
  TData = AxiosResponse<DataPageGeOrderHistorySchema>,
>(
  params?: GetGeSellHistoryMyGrandexchangeHistoryGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/grandexchange/history`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch account details.
 * @summary Get Account Details
 */
export const getAccountDetailsMyDetailsGet = <
  TData = AxiosResponse<MyAccountDetailsSchema>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/details`, options);
};

/**
 * Change your account password. Changing the password reset the account token.
 * @summary Change Password
 */
export const changePasswordMyChangePasswordPost = <
  TData = AxiosResponse<ResponseSchema>,
>(
  changePassword: ChangePassword,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/change_password`, changePassword, options);
};

/**
 * Moves a character on the map using the map's X and Y position.
 * @summary Action Move
 */
export const actionMoveMyNameActionMovePost = <
  TData = AxiosResponse<CharacterMovementResponseSchema>,
>(
  name: string,
  destinationSchema: DestinationSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/move`, destinationSchema, options);
};

/**
 * Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds)
 * @summary Action Rest
 */
export const actionRestMyNameActionRestPost = <
  TData = AxiosResponse<CharacterRestResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/rest`, undefined, options);
};

/**
 * Equip an item on your character.
 * @summary Action Equip Item
 */
export const actionEquipItemMyNameActionEquipPost = <
  TData = AxiosResponse<EquipmentResponseSchema>,
>(
  name: string,
  equipSchema: EquipSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/equip`, equipSchema, options);
};

/**
 * Unequip an item on your character.
 * @summary Action Unequip Item
 */
export const actionUnequipItemMyNameActionUnequipPost = <
  TData = AxiosResponse<EquipmentResponseSchema>,
>(
  name: string,
  unequipSchema: UnequipSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/unequip`, unequipSchema, options);
};

/**
 * Use an item as a consumable.
 * @summary Action Use Item
 */
export const actionUseItemMyNameActionUsePost = <
  TData = AxiosResponse<UseItemResponseSchema>,
>(
  name: string,
  simpleItemSchema: SimpleItemSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/use`, simpleItemSchema, options);
};

/**
 * Start a fight against a monster on the character's map.
 * @summary Action Fight
 */
export const actionFightMyNameActionFightPost = <
  TData = AxiosResponse<CharacterFightResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/fight`, undefined, options);
};

/**
 * Harvest a resource on the character's map.
 * @summary Action Gathering
 */
export const actionGatheringMyNameActionGatheringPost = <
  TData = AxiosResponse<SkillResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/gathering`, undefined, options);
};

/**
 * Crafting an item. The character must be on a map with a workshop.
 * @summary Action Crafting
 */
export const actionCraftingMyNameActionCraftingPost = <
  TData = AxiosResponse<SkillResponseSchema>,
>(
  name: string,
  craftingSchema: CraftingSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/crafting`, craftingSchema, options);
};

/**
 * Deposit gold in a bank on the character's map.
 * @summary Action Deposit Bank Gold
 */
export const actionDepositBankGoldMyNameActionBankDepositGoldPost = <
  TData = AxiosResponse<BankGoldTransactionResponseSchema>,
>(
  name: string,
  depositWithdrawGoldSchema: DepositWithdrawGoldSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/bank/deposit/gold`,
    depositWithdrawGoldSchema,
    options,
  );
};

/**
 * Deposit multiple items in a bank on the character's map.
The cooldown will be 3 seconds multiplied by the number of different items withdrawn.
 * @summary Action Deposit Bank Item
 */
export const actionDepositBankItemMyNameActionBankDepositItemPost = <
  TData = AxiosResponse<BankItemTransactionResponseSchema>,
>(
  name: string,
  simpleItemSchema: SimpleItemSchema[],
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/bank/deposit/item`,
    simpleItemSchema,
    options,
  );
};

/**
 * Take items from your bank and put them in the character's inventory.
The cooldown will be 3 seconds multiplied by the number of different items withdrawn.
 * @summary Action Withdraw Bank Item
 */
export const actionWithdrawBankItemMyNameActionBankWithdrawItemPost = <
  TData = AxiosResponse<BankItemTransactionResponseSchema>,
>(
  name: string,
  simpleItemSchema: SimpleItemSchema[],
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/bank/withdraw/item`,
    simpleItemSchema,
    options,
  );
};

/**
 * Withdraw gold from your bank.
 * @summary Action Withdraw Bank Gold
 */
export const actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost = <
  TData = AxiosResponse<BankGoldTransactionResponseSchema>,
>(
  name: string,
  depositWithdrawGoldSchema: DepositWithdrawGoldSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/bank/withdraw/gold`,
    depositWithdrawGoldSchema,
    options,
  );
};

/**
 * Buy a 25 slots bank expansion.
 * @summary Action Buy Bank Expansion
 */
export const actionBuyBankExpansionMyNameActionBankBuyExpansionPost = <
  TData = AxiosResponse<BankExtensionTransactionResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/bank/buy_expansion`,
    undefined,
    options,
  );
};

/**
 * Buy an item from an NPC on the character's map.
 * @summary Action Npc Buy Item
 */
export const actionNpcBuyItemMyNameActionNpcBuyPost = <
  TData = AxiosResponse<NpcMerchantTransactionResponseSchema>,
>(
  name: string,
  npcMerchantBuySchema: NpcMerchantBuySchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/npc/buy`,
    npcMerchantBuySchema,
    options,
  );
};

/**
 * Sell an item to an NPC on the character's map.
 * @summary Action Npc Sell Item
 */
export const actionNpcSellItemMyNameActionNpcSellPost = <
  TData = AxiosResponse<NpcMerchantTransactionResponseSchema>,
>(
  name: string,
  npcMerchantBuySchema: NpcMerchantBuySchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/npc/sell`,
    npcMerchantBuySchema,
    options,
  );
};

/**
 * Recycling an item. The character must be on a map with a workshop (only for equipments and weapons).
 * @summary Action Recycling
 */
export const actionRecyclingMyNameActionRecyclingPost = <
  TData = AxiosResponse<RecyclingResponseSchema>,
>(
  name: string,
  recyclingSchema: RecyclingSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/recycling`, recyclingSchema, options);
};

/**
 * Buy an item at the Grand Exchange on the character's map.
 * @summary Action Ge Buy Item
 */
export const actionGeBuyItemMyNameActionGrandexchangeBuyPost = <
  TData = AxiosResponse<GETransactionResponseSchema>,
>(
  name: string,
  gEBuyOrderSchema: GEBuyOrderSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/grandexchange/buy`,
    gEBuyOrderSchema,
    options,
  );
};

/**
 * Create a sell order at the Grand Exchange on the character's map. Please note there is a 3% listing tax, charged at the time of posting, on the total price.
 * @summary Action Ge Create Sell Order
 */
export const actionGeCreateSellOrderMyNameActionGrandexchangeSellPost = <
  TData = AxiosResponse<GECreateOrderTransactionResponseSchema>,
>(
  name: string,
  gEOrderCreationrSchema: GEOrderCreationrSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/grandexchange/sell`,
    gEOrderCreationrSchema,
    options,
  );
};

/**
 * Cancel a sell order at the Grand Exchange on the character's map.
 * @summary Action Ge Cancel Sell Order
 */
export const actionGeCancelSellOrderMyNameActionGrandexchangeCancelPost = <
  TData = AxiosResponse<GETransactionResponseSchema>,
>(
  name: string,
  gECancelOrderSchema: GECancelOrderSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/grandexchange/cancel`,
    gECancelOrderSchema,
    options,
  );
};

/**
 * Complete a task.
 * @summary Action Complete Task
 */
export const actionCompleteTaskMyNameActionTaskCompletePost = <
  TData = AxiosResponse<RewardDataResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/task/complete`, undefined, options);
};

/**
 * Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
 * @summary Action Task Exchange
 */
export const actionTaskExchangeMyNameActionTaskExchangePost = <
  TData = AxiosResponse<RewardDataResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/task/exchange`, undefined, options);
};

/**
 * Accepting a new task.
 * @summary Action Accept New Task
 */
export const actionAcceptNewTaskMyNameActionTaskNewPost = <
  TData = AxiosResponse<TaskResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/task/new`, undefined, options);
};

/**
 * Trading items with a Tasks Master.
 * @summary Action Task Trade
 */
export const actionTaskTradeMyNameActionTaskTradePost = <
  TData = AxiosResponse<TaskTradeResponseSchema>,
>(
  name: string,
  simpleItemSchema: SimpleItemSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/task/trade`, simpleItemSchema, options);
};

/**
 * Cancel a task for 1 tasks coin.
 * @summary Action Task Cancel
 */
export const actionTaskCancelMyNameActionTaskCancelPost = <
  TData = AxiosResponse<TaskCancelledResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/task/cancel`, undefined, options);
};

/**
 * Give gold to another character in your account on the same map.
 * @summary Action Give Gold
 */
export const actionGiveGoldMyNameActionGiveGoldPost = <
  TData = AxiosResponse<GiveGoldReponseSchema>,
>(
  name: string,
  giveGoldSchema: GiveGoldSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/give/gold`, giveGoldSchema, options);
};

/**
 * Give items to another character in your account on the same map.
The cooldown will be 3 seconds multiplied by the number of different items given.
 * @summary Action Give Items
 */
export const actionGiveItemsMyNameActionGiveItemPost = <
  TData = AxiosResponse<GiveItemReponseSchema>,
>(
  name: string,
  giveItemsSchema: GiveItemsSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/give/item`, giveItemsSchema, options);
};

/**
 * Delete an item from your character's inventory.
 * @summary Action Delete Item
 */
export const actionDeleteItemMyNameActionDeletePost = <
  TData = AxiosResponse<DeleteItemResponseSchema>,
>(
  name: string,
  simpleItemSchema: SimpleItemSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/my/${name}/action/delete`, simpleItemSchema, options);
};

/**
 * Change the skin of your character.
 * @summary Action Change Skin
 */
export const actionChangeSkinMyNameActionChangeSkinPost = <
  TData = AxiosResponse<ChangeSkinResponseSchema>,
>(
  name: string,
  changeSkinCharacterSchema: ChangeSkinCharacterSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/my/${name}/action/change_skin`,
    changeSkinCharacterSchema,
    options,
  );
};

/**
 * History of the last 250 actions of all your characters.
 * @summary Get All Characters Logs
 */
export const getAllCharactersLogsMyLogsGet = <
  TData = AxiosResponse<DataPageLogSchema>,
>(
  params?: GetAllCharactersLogsMyLogsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/logs`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * History of the last actions of your character.
 * @summary Get Character Logs
 */
export const getCharacterLogsMyLogsNameGet = <
  TData = AxiosResponse<DataPageLogSchema>,
>(
  name: string,
  params?: GetCharacterLogsMyLogsNameGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/logs/${name}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * List of your characters.
 * @summary Get My Characters
 */
export const getMyCharactersMyCharactersGet = <
  TData = AxiosResponse<MyCharactersListSchema>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/my/characters`, options);
};

/**
 * @summary Create Account
 */
export const createAccountAccountsCreatePost = <
  TData = AxiosResponse<ResponseSchema>,
>(
  addAccountSchema: AddAccountSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/accounts/create`, addAccountSchema, options);
};

/**
 * Request a password reset.
 * @summary Forgot Password
 */
export const forgotPasswordAccountsForgotPasswordPost = <
  TData = AxiosResponse<PasswordResetResponseSchema>,
>(
  passwordResetRequestSchema: PasswordResetRequestSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/accounts/forgot_password`,
    passwordResetRequestSchema,
    options,
  );
};

/**
 * Reset password with a token. Use /forgot_password to get a token by email.
 * @summary Reset Password
 */
export const resetPasswordAccountsResetPasswordPost = <
  TData = AxiosResponse<PasswordResetResponseSchema>,
>(
  passwordResetConfirmSchema: PasswordResetConfirmSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `/accounts/reset_password`,
    passwordResetConfirmSchema,
    options,
  );
};

/**
 * Retrieve the achievements of a account.
 * @summary Get Account Achievements
 */
export const getAccountAchievementsAccountsAccountAchievementsGet = <
  TData = AxiosResponse<DataPageAccountAchievementSchema>,
>(
  account: string,
  params?: GetAccountAchievementsAccountsAccountAchievementsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/accounts/${account}/achievements`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Account character lists.
 * @summary Get Account Characters
 */
export const getAccountCharactersAccountsAccountCharactersGet = <
  TData = AxiosResponse<CharactersListSchema>,
>(
  account: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/accounts/${account}/characters`, options);
};

/**
 * Retrieve the details of a character.
 * @summary Get Account
 */
export const getAccountAccountsAccountGet = <
  TData = AxiosResponse<AccountDetailsSchema>,
>(
  account: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/accounts/${account}`, options);
};

/**
 * List of all achievements.
 * @summary Get All Achievements
 */
export const getAllAchievementsAchievementsGet = <
  TData = AxiosResponse<DataPageAchievementSchema>,
>(
  params?: GetAllAchievementsAchievementsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/achievements`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a achievement.
 * @summary Get Achievement
 */
export const getAchievementAchievementsCodeGet = <
  TData = AxiosResponse<AchievementResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/achievements/${code}`, options);
};

/**
 * List of all badges.
 * @summary Get All Badges
 */
export const getAllBadgesBadgesGet = <
  TData = AxiosResponse<DataPageBadgeSchema>,
>(
  params?: GetAllBadgesBadgesGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/badges`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a badge.
 * @summary Get Badge
 */
export const getBadgeBadgesCodeGet = <
  TData = AxiosResponse<BadgeResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/badges/${code}`, options);
};

/**
 * Create new character on your account. You can create up to 5 characters.
 * @summary Create Character
 */
export const createCharacterCharactersCreatePost = <
  TData = AxiosResponse<CharacterResponseSchema>,
>(
  addCharacterSchema: AddCharacterSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/characters/create`, addCharacterSchema, options);
};

/**
 * Delete character on your account.
 * @summary Delete Character
 */
export const deleteCharacterCharactersDeletePost = <
  TData = AxiosResponse<CharacterResponseSchema>,
>(
  deleteCharacterSchema: DeleteCharacterSchema,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/characters/delete`, deleteCharacterSchema, options);
};

/**
 * Retrieve the details of a character.
 * @summary Get Character
 */
export const getCharacterCharactersNameGet = <
  TData = AxiosResponse<CharacterResponseSchema>,
>(
  name: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/characters/${name}`, options);
};

/**
 * List of all effects. Effects are used by equipment, tools, runes, consumables and monsters. An effect is an action that produces an effect on the game.
 * @summary Get All Effects
 */
export const getAllEffectsEffectsGet = <
  TData = AxiosResponse<DataPageEffectSchema>,
>(
  params?: GetAllEffectsEffectsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/effects`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a badge.
 * @summary Get Effect
 */
export const getEffectEffectsCodeGet = <
  TData = AxiosResponse<EffectResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/effects/${code}`, options);
};

/**
 * Fetch active events details.
 * @summary Get All Active Events
 */
export const getAllActiveEventsEventsActiveGet = <
  TData = AxiosResponse<DataPageActiveEventSchema>,
>(
  params?: GetAllActiveEventsEventsActiveGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/events/active`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch events details.
 * @summary Get All Events
 */
export const getAllEventsEventsGet = <
  TData = AxiosResponse<DataPageEventSchema>,
>(
  params?: GetAllEventsEventsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/events`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch the sales history of the item for the last 7 days.
 * @summary Get Ge Sell History
 */
export const getGeSellHistoryGrandexchangeHistoryCodeGet = <
  TData = AxiosResponse<DataPageGeOrderHistorySchema>,
>(
  code: string,
  params?: GetGeSellHistoryGrandexchangeHistoryCodeGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/grandexchange/history/${code}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch all sell orders.
 * @summary Get Ge Sell Orders
 */
export const getGeSellOrdersGrandexchangeOrdersGet = <
  TData = AxiosResponse<DataPageGEOrderSchema>,
>(
  params?: GetGeSellOrdersGrandexchangeOrdersGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/grandexchange/orders`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the sell order of a item.
 * @summary Get Ge Sell Order
 */
export const getGeSellOrderGrandexchangeOrdersIdGet = <
  TData = AxiosResponse<GEOrderReponseSchema>,
>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/grandexchange/orders/${id}`, options);
};

/**
 * Fetch items details.
 * @summary Get All Items
 */
export const getAllItemsItemsGet = <TData = AxiosResponse<DataPageItemSchema>>(
  params?: GetAllItemsItemsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/items`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a item.
 * @summary Get Item
 */
export const getItemItemsCodeGet = <TData = AxiosResponse<ItemResponseSchema>>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/items/${code}`, options);
};

/**
 * Fetch leaderboard details.
 * @summary Get Characters Leaderboard
 */
export const getCharactersLeaderboardLeaderboardCharactersGet = <
  TData = AxiosResponse<DataPageCharacterLeaderboardSchema>,
>(
  params?: GetCharactersLeaderboardLeaderboardCharactersGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/leaderboard/characters`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch leaderboard details.
 * @summary Get Accounts Leaderboard
 */
export const getAccountsLeaderboardLeaderboardAccountsGet = <
  TData = AxiosResponse<DataPageAccountLeaderboardSchema>,
>(
  params?: GetAccountsLeaderboardLeaderboardAccountsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/leaderboard/accounts`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch maps details.
 * @summary Get All Maps
 */
export const getAllMapsMapsGet = <TData = AxiosResponse<DataPageMapSchema>>(
  params?: GetAllMapsMapsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/maps`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a map.
 * @summary Get Map
 */
export const getMapMapsXYGet = <TData = AxiosResponse<MapResponseSchema>>(
  x: number,
  y: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/maps/${x}/${y}`, options);
};

/**
 * Fetch monsters details.
 * @summary Get All Monsters
 */
export const getAllMonstersMonstersGet = <
  TData = AxiosResponse<DataPageMonsterSchema>,
>(
  params?: GetAllMonstersMonstersGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/monsters`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a monster.
 * @summary Get Monster
 */
export const getMonsterMonstersCodeGet = <
  TData = AxiosResponse<MonsterResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/monsters/${code}`, options);
};

/**
 * Fetch NPCs details.
 * @summary Get All Npcs
 */
export const getAllNpcsNpcsDetailsGet = <
  TData = AxiosResponse<DataPageNPCSchema>,
>(
  params?: GetAllNpcsNpcsDetailsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/npcs/details`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a NPC.
 * @summary Get Npc
 */
export const getNpcNpcsDetailsCodeGet = <
  TData = AxiosResponse<NPCResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/npcs/details/${code}`, options);
};

/**
 * Retrieve the items list of a NPC. If the NPC has items to buy, sell or trade, they will be displayed.
 * @summary Get Npc Items
 */
export const getNpcItemsNpcsItemsCodeGet = <
  TData = AxiosResponse<DataPageNPCItem>,
>(
  code: string,
  params?: GetNpcItemsNpcsItemsCodeGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/npcs/items/${code}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the list of all NPC items.
 * @summary Get All Npcs Items
 */
export const getAllNpcsItemsNpcsItemsGet = <
  TData = AxiosResponse<DataPageNPCItem>,
>(
  params?: GetAllNpcsItemsNpcsItemsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/npcs/items`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Fetch resources details.
 * @summary Get All Resources
 */
export const getAllResourcesResourcesGet = <
  TData = AxiosResponse<DataPageResourceSchema>,
>(
  params?: GetAllResourcesResourcesGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/resources`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a resource.
 * @summary Get Resource
 */
export const getResourceResourcesCodeGet = <
  TData = AxiosResponse<ResourceResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/resources/${code}`, options);
};

/**
 * Fetch the list of all tasks.
 * @summary Get All Tasks
 */
export const getAllTasksTasksListGet = <
  TData = AxiosResponse<DataPageTaskFullSchema>,
>(
  params?: GetAllTasksTasksListGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/tasks/list`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a task.
 * @summary Get Task
 */
export const getTaskTasksListCodeGet = <
  TData = AxiosResponse<TaskFullResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/tasks/list/${code}`, options);
};

/**
 * Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.
 * @summary Get All Tasks Rewards
 */
export const getAllTasksRewardsTasksRewardsGet = <
  TData = AxiosResponse<DataPageDropRateSchema>,
>(
  params?: GetAllTasksRewardsTasksRewardsGetParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/tasks/rewards`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * Retrieve the details of a tasks reward.
 * @summary Get Tasks Reward
 */
export const getTasksRewardTasksRewardsCodeGet = <
  TData = AxiosResponse<RewardResponseSchema>,
>(
  code: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/tasks/rewards/${code}`, options);
};

/**
 * Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
 * @summary Generate Token
 */
export const generateTokenTokenPost = <
  TData = AxiosResponse<TokenResponseSchema>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/token`, undefined, options);
};

export type GetServerDetailsGetResult = AxiosResponse<StatusResponseSchema>;
export type GetBankDetailsMyBankGetResult = AxiosResponse<BankResponseSchema>;
export type GetBankItemsMyBankItemsGetResult =
  AxiosResponse<DataPageSimpleItemSchema>;
export type GetGeSellOrdersMyGrandexchangeOrdersGetResult =
  AxiosResponse<DataPageGEOrderSchema>;
export type GetGeSellHistoryMyGrandexchangeHistoryGetResult =
  AxiosResponse<DataPageGeOrderHistorySchema>;
export type GetAccountDetailsMyDetailsGetResult =
  AxiosResponse<MyAccountDetailsSchema>;
export type ChangePasswordMyChangePasswordPostResult =
  AxiosResponse<ResponseSchema>;
export type ActionMoveMyNameActionMovePostResult =
  AxiosResponse<CharacterMovementResponseSchema>;
export type ActionRestMyNameActionRestPostResult =
  AxiosResponse<CharacterRestResponseSchema>;
export type ActionEquipItemMyNameActionEquipPostResult =
  AxiosResponse<EquipmentResponseSchema>;
export type ActionUnequipItemMyNameActionUnequipPostResult =
  AxiosResponse<EquipmentResponseSchema>;
export type ActionUseItemMyNameActionUsePostResult =
  AxiosResponse<UseItemResponseSchema>;
export type ActionFightMyNameActionFightPostResult =
  AxiosResponse<CharacterFightResponseSchema>;
export type ActionGatheringMyNameActionGatheringPostResult =
  AxiosResponse<SkillResponseSchema>;
export type ActionCraftingMyNameActionCraftingPostResult =
  AxiosResponse<SkillResponseSchema>;
export type ActionDepositBankGoldMyNameActionBankDepositGoldPostResult =
  AxiosResponse<BankGoldTransactionResponseSchema>;
export type ActionDepositBankItemMyNameActionBankDepositItemPostResult =
  AxiosResponse<BankItemTransactionResponseSchema>;
export type ActionWithdrawBankItemMyNameActionBankWithdrawItemPostResult =
  AxiosResponse<BankItemTransactionResponseSchema>;
export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResult =
  AxiosResponse<BankGoldTransactionResponseSchema>;
export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResult =
  AxiosResponse<BankExtensionTransactionResponseSchema>;
export type ActionNpcBuyItemMyNameActionNpcBuyPostResult =
  AxiosResponse<NpcMerchantTransactionResponseSchema>;
export type ActionNpcSellItemMyNameActionNpcSellPostResult =
  AxiosResponse<NpcMerchantTransactionResponseSchema>;
export type ActionRecyclingMyNameActionRecyclingPostResult =
  AxiosResponse<RecyclingResponseSchema>;
export type ActionGeBuyItemMyNameActionGrandexchangeBuyPostResult =
  AxiosResponse<GETransactionResponseSchema>;
export type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResult =
  AxiosResponse<GECreateOrderTransactionResponseSchema>;
export type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResult =
  AxiosResponse<GETransactionResponseSchema>;
export type ActionCompleteTaskMyNameActionTaskCompletePostResult =
  AxiosResponse<RewardDataResponseSchema>;
export type ActionTaskExchangeMyNameActionTaskExchangePostResult =
  AxiosResponse<RewardDataResponseSchema>;
export type ActionAcceptNewTaskMyNameActionTaskNewPostResult =
  AxiosResponse<TaskResponseSchema>;
export type ActionTaskTradeMyNameActionTaskTradePostResult =
  AxiosResponse<TaskTradeResponseSchema>;
export type ActionTaskCancelMyNameActionTaskCancelPostResult =
  AxiosResponse<TaskCancelledResponseSchema>;
export type ActionGiveGoldMyNameActionGiveGoldPostResult =
  AxiosResponse<GiveGoldReponseSchema>;
export type ActionGiveItemsMyNameActionGiveItemPostResult =
  AxiosResponse<GiveItemReponseSchema>;
export type ActionDeleteItemMyNameActionDeletePostResult =
  AxiosResponse<DeleteItemResponseSchema>;
export type ActionChangeSkinMyNameActionChangeSkinPostResult =
  AxiosResponse<ChangeSkinResponseSchema>;
export type GetAllCharactersLogsMyLogsGetResult =
  AxiosResponse<DataPageLogSchema>;
export type GetCharacterLogsMyLogsNameGetResult =
  AxiosResponse<DataPageLogSchema>;
export type GetMyCharactersMyCharactersGetResult =
  AxiosResponse<MyCharactersListSchema>;
export type CreateAccountAccountsCreatePostResult =
  AxiosResponse<ResponseSchema>;
export type ForgotPasswordAccountsForgotPasswordPostResult =
  AxiosResponse<PasswordResetResponseSchema>;
export type ResetPasswordAccountsResetPasswordPostResult =
  AxiosResponse<PasswordResetResponseSchema>;
export type GetAccountAchievementsAccountsAccountAchievementsGetResult =
  AxiosResponse<DataPageAccountAchievementSchema>;
export type GetAccountCharactersAccountsAccountCharactersGetResult =
  AxiosResponse<CharactersListSchema>;
export type GetAccountAccountsAccountGetResult =
  AxiosResponse<AccountDetailsSchema>;
export type GetAllAchievementsAchievementsGetResult =
  AxiosResponse<DataPageAchievementSchema>;
export type GetAchievementAchievementsCodeGetResult =
  AxiosResponse<AchievementResponseSchema>;
export type GetAllBadgesBadgesGetResult = AxiosResponse<DataPageBadgeSchema>;
export type GetBadgeBadgesCodeGetResult = AxiosResponse<BadgeResponseSchema>;
export type CreateCharacterCharactersCreatePostResult =
  AxiosResponse<CharacterResponseSchema>;
export type DeleteCharacterCharactersDeletePostResult =
  AxiosResponse<CharacterResponseSchema>;
export type GetCharacterCharactersNameGetResult =
  AxiosResponse<CharacterResponseSchema>;
export type GetAllEffectsEffectsGetResult = AxiosResponse<DataPageEffectSchema>;
export type GetEffectEffectsCodeGetResult = AxiosResponse<EffectResponseSchema>;
export type GetAllActiveEventsEventsActiveGetResult =
  AxiosResponse<DataPageActiveEventSchema>;
export type GetAllEventsEventsGetResult = AxiosResponse<DataPageEventSchema>;
export type GetGeSellHistoryGrandexchangeHistoryCodeGetResult =
  AxiosResponse<DataPageGeOrderHistorySchema>;
export type GetGeSellOrdersGrandexchangeOrdersGetResult =
  AxiosResponse<DataPageGEOrderSchema>;
export type GetGeSellOrderGrandexchangeOrdersIdGetResult =
  AxiosResponse<GEOrderReponseSchema>;
export type GetAllItemsItemsGetResult = AxiosResponse<DataPageItemSchema>;
export type GetItemItemsCodeGetResult = AxiosResponse<ItemResponseSchema>;
export type GetCharactersLeaderboardLeaderboardCharactersGetResult =
  AxiosResponse<DataPageCharacterLeaderboardSchema>;
export type GetAccountsLeaderboardLeaderboardAccountsGetResult =
  AxiosResponse<DataPageAccountLeaderboardSchema>;
export type GetAllMapsMapsGetResult = AxiosResponse<DataPageMapSchema>;
export type GetMapMapsXYGetResult = AxiosResponse<MapResponseSchema>;
export type GetAllMonstersMonstersGetResult =
  AxiosResponse<DataPageMonsterSchema>;
export type GetMonsterMonstersCodeGetResult =
  AxiosResponse<MonsterResponseSchema>;
export type GetAllNpcsNpcsDetailsGetResult = AxiosResponse<DataPageNPCSchema>;
export type GetNpcNpcsDetailsCodeGetResult = AxiosResponse<NPCResponseSchema>;
export type GetNpcItemsNpcsItemsCodeGetResult = AxiosResponse<DataPageNPCItem>;
export type GetAllNpcsItemsNpcsItemsGetResult = AxiosResponse<DataPageNPCItem>;
export type GetAllResourcesResourcesGetResult =
  AxiosResponse<DataPageResourceSchema>;
export type GetResourceResourcesCodeGetResult =
  AxiosResponse<ResourceResponseSchema>;
export type GetAllTasksTasksListGetResult =
  AxiosResponse<DataPageTaskFullSchema>;
export type GetTaskTasksListCodeGetResult =
  AxiosResponse<TaskFullResponseSchema>;
export type GetAllTasksRewardsTasksRewardsGetResult =
  AxiosResponse<DataPageDropRateSchema>;
export type GetTasksRewardTasksRewardsCodeGetResult =
  AxiosResponse<RewardResponseSchema>;
export type GenerateTokenTokenPostResult = AxiosResponse<TokenResponseSchema>;
