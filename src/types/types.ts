/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Artifacts API
 * 
Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.

Website: https://artifactsmmo.com/

Documentation: https://docs-test.artifactsmmo.com/

OpenAPI Spec: https://api-test.artifactsmmo.com/openapi.json

 * OpenAPI spec version: 6.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface AccessSchema {
  /** Map access type determining movement and accessibility */
  type: MapAccessType;
  /**
   * Access conditions for the map
   * @nullable
   */
  conditions?: ConditionSchema[] | null;
}

export interface AccountAchievementSchema {
  /** Name of the achievement. */
  name: string;
  /** Code of the achievement.  */
  code: string;
  /** Description of the achievement. */
  description: string;
  /** Points of the achievement. Used for the leaderboard. */
  points: number;
  /** Type of achievement. */
  type: AchievementType;
  /**
   * Target of the achievement.
   * @nullable
   */
  target?: string | null;
  /** Total to do. */
  total: number;
  /** Rewards. */
  rewards: AchievementRewardsSchema;
  /** Current progress. */
  current: number;
  /**
   * Completed at.
   * @nullable
   */
  completed_at?: string | null;
}

export interface AccountDetails {
  /** Username. */
  username: string;
  /** Member status. */
  member: boolean;
  /** Account status. */
  status: AccountStatus;
  /** Account badges. */
  badges?: unknown[];
  /** Skins owned. */
  skins: unknown[];
  /** Achievement points. */
  achievements_points: number;
  /** Banned. */
  banned: boolean;
  /** Ban reason. */
  ban_reason?: string;
}

export interface AccountDetailsSchema {
  data: AccountDetails;
}

export interface AccountLeaderboardSchema {
  /** Position in the leaderboard. */
  position: number;
  /** Account name. */
  account: string;
  /** Member status. */
  status: AccountStatus;
  /** Achievements points. */
  achievements_points: number;
  /** Gold in the account. */
  gold: number;
}

export type AccountLeaderboardType = typeof AccountLeaderboardType[keyof typeof AccountLeaderboardType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountLeaderboardType = {
  achievements_points: 'achievements_points',
  gold: 'gold',
} as const;

export type AccountStatus = typeof AccountStatus[keyof typeof AccountStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountStatus = {
  standard: 'standard',
  founder: 'founder',
  gold_founder: 'gold_founder',
  vip_founder: 'vip_founder',
} as const;

export interface AchievementResponseSchema {
  data: AchievementSchema;
}

export interface AchievementRewardsSchema {
  /** Gold rewards. */
  gold: number;
}

export interface AchievementSchema {
  /** Name of the achievement. */
  name: string;
  /** Code of the achievement.  */
  code: string;
  /** Description of the achievement. */
  description: string;
  /** Points of the achievement. Used for the leaderboard. */
  points: number;
  /** Type of achievement. */
  type: AchievementType;
  /**
   * Target of the achievement.
   * @nullable
   */
  target?: string | null;
  /** Total to do. */
  total: number;
  /** Rewards. */
  rewards: AchievementRewardsSchema;
}

export type AchievementType = typeof AchievementType[keyof typeof AchievementType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AchievementType = {
  combat_kill: 'combat_kill',
  combat_drop: 'combat_drop',
  combat_level: 'combat_level',
  gathering: 'gathering',
  crafting: 'crafting',
  recycling: 'recycling',
  task: 'task',
  other: 'other',
  use: 'use',
} as const;

export type ActionType = typeof ActionType[keyof typeof ActionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActionType = {
  movement: 'movement',
  fight: 'fight',
  multi_fight: 'multi_fight',
  crafting: 'crafting',
  gathering: 'gathering',
  buy_ge: 'buy_ge',
  sell_ge: 'sell_ge',
  buy_npc: 'buy_npc',
  sell_npc: 'sell_npc',
  cancel_ge: 'cancel_ge',
  delete_item: 'delete_item',
  deposit_item: 'deposit_item',
  withdraw_item: 'withdraw_item',
  deposit_gold: 'deposit_gold',
  withdraw_gold: 'withdraw_gold',
  equip: 'equip',
  unequip: 'unequip',
  task: 'task',
  recycling: 'recycling',
  rest: 'rest',
  use: 'use',
  buy_bank_expansion: 'buy_bank_expansion',
  give_item: 'give_item',
  give_gold: 'give_gold',
  change_skin: 'change_skin',
  rename: 'rename',
  transition: 'transition',
} as const;

export interface ActiveCharacterSchema {
  /** Name of the character. */
  name: string;
  /** Account name. */
  account: string;
  /** Character skin code. */
  skin: CharacterSkin;
  /** Character x coordinate. */
  x: number;
  /** Character y coordinate. */
  y: number;
  /** Character current layer. */
  layer: MapLayer;
  /** Character current map ID. */
  map_id: number;
}

export interface ActiveEventResponseSchema {
  data: ActiveEventSchema;
}

export interface ActiveEventSchema {
  /** Name of the event. */
  name: string;
  /** Code of the event. */
  code: string;
  /** Map of the event. */
  map: MapSchema;
  /** Previous map skin. */
  previous_map: MapSchema;
  /** Duration in minutes. */
  duration: number;
  /** Expiration datetime. */
  expiration: string;
  /** Start datetime. */
  created_at: string;
}

export interface AddAccountSchema {
  /**
   * Your desired username.
   * @minLength 6
   * @maxLength 32
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  username: string;
  /**
   * Your password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  password: string;
  /** Your email. */
  email: string;
}

export interface AddCharacterSchema {
  /**
   * Your desired character name. It's unique and all players can see it.
   * @minLength 3
   * @maxLength 12
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  name: string;
  /** Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
  skin: CharacterSkin;
}

export interface AnnouncementSchema {
  /** Announcement text. */
  message: string;
  /** Datetime of the announcement. */
  created_at?: string;
}

export interface BadgeConditionSchema {
  /** Code of the condition. */
  code: string;
  /**
   * Quantity of the condition (if any).
   * @nullable
   */
  quantity?: number | null;
}

export interface BadgeResponseSchema {
  data: BadgeSchema;
}

export interface BadgeSchema {
  /** Code of the badge. This is the badge's unique identifier (ID). */
  code: string;
  /**
   * Season of the badge.
   * @nullable
   */
  season?: number | null;
  /** Description of the badge. */
  description: string;
  /** Conditions to get the badge. */
  conditions: BadgeConditionSchema[];
}

export interface BankExtensionSchema {
  /**
   * Price of the bank extension.
   * @minimum 0
   */
  price: number;
}

export interface BankExtensionTransactionResponseSchema {
  data: BankExtensionTransactionSchema;
}

export interface BankExtensionTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  transaction: BankExtensionSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface BankGoldTransactionResponseSchema {
  data: BankGoldTransactionSchema;
}

export interface BankGoldTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Bank details. */
  bank: GoldSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface BankItemTransactionResponseSchema {
  data: BankItemTransactionSchema;
}

export interface BankItemTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Items details. */
  items: SimpleItemSchema[];
  /** Items in your banks. */
  bank: SimpleItemSchema[];
  /** Player details. */
  character: CharacterSchema;
}

export interface BankResponseSchema {
  data: BankSchema;
}

export interface BankSchema {
  /**
   * Maximum slots in your bank.
   * @minimum 0
   */
  slots: number;
  /**
   * Bank expansions.
   * @minimum 0
   */
  expansions: number;
  /**
   * Next expansion cost.
   * @minimum 0
   */
  next_expansion_cost: number;
  /**
   * Quantity of gold in your bank.
   * @minimum 0
   */
  gold: number;
}

export interface ChangePassword {
  /**
   * Your password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  current_password: string;
  /**
   * New password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  new_password: string;
}

export interface ChangeSkinCharacterDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  skin: string;
  /** Player details. */
  character: CharacterSchema;
}

export interface ChangeSkinCharacterSchema {
  /** Your desired skin. Skins unlocked by default: 'men1', 'men2', 'men3', 'women1', 'women2', 'women3'. */
  skin: CharacterSkin;
}

export interface ChangeSkinResponseSchema {
  data: ChangeSkinCharacterDataSchema;
}

export interface CharacterFightDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Character fight details. */
  fight: CharacterFightSchema;
  /** All characters involved. */
  characters: CharacterSchema[];
}

export interface CharacterFightResponseSchema {
  data: CharacterFightDataSchema;
}

export interface CharacterFightSchema {
  /** The result of the fight. */
  result: FightResult;
  /** Numbers of the turns of the combat. */
  turns: number;
  /** The code of the monster fought. */
  opponent: string;
  /** The fight logs. */
  logs: string[];
  /** Results for each character. */
  characters: CharacterMultiFightResultSchema[];
}

export interface CharacterLeaderboardSchema {
  /** Position in the leaderboard. */
  position: number;
  /** Character name. */
  name: string;
  /** Account name. */
  account: string;
  /** Member status. */
  status: AccountStatus;
  /** Character skin code. */
  skin: string;
  /** Combat level. */
  level: number;
  /** Total XP of your character. */
  total_xp: number;
  /** Mining level. */
  mining_level: number;
  /** Mining total xp. */
  mining_total_xp: number;
  /** Woodcutting level. */
  woodcutting_level: number;
  /** Woodcutting total xp. */
  woodcutting_total_xp: number;
  /** Fishing level. */
  fishing_level: number;
  /** Fishing total xp. */
  fishing_total_xp: number;
  /** Weaponcrafting level. */
  weaponcrafting_level: number;
  /** Weaponcrafting total xp. */
  weaponcrafting_total_xp: number;
  /** Gearcrafting level. */
  gearcrafting_level: number;
  /** Gearcrafting total xp. */
  gearcrafting_total_xp: number;
  /** Jewelrycrafting level. */
  jewelrycrafting_level: number;
  /** Jewelrycrafting total xp. */
  jewelrycrafting_total_xp: number;
  /** Cooking level. */
  cooking_level: number;
  /** Cooking total xp. */
  cooking_total_xp: number;
  /** Alchemy level. */
  alchemy_level: number;
  /** Alchemy total xp. */
  alchemy_total_xp: number;
  /** The numbers of gold on this character. */
  gold: number;
}

export type CharacterLeaderboardType = typeof CharacterLeaderboardType[keyof typeof CharacterLeaderboardType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharacterLeaderboardType = {
  combat: 'combat',
  woodcutting: 'woodcutting',
  mining: 'mining',
  fishing: 'fishing',
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  alchemy: 'alchemy',
} as const;

export interface CharacterMovementDataSchema {
  /** Cooldown details */
  cooldown: CooldownSchema;
  /** Destination details. */
  destination: MapSchema;
  /** Path taken from start to destination (list of coordinates) */
  path: [number, number][];
  /** Character details. */
  character: CharacterSchema;
}

export interface CharacterMovementResponseSchema {
  data: CharacterMovementDataSchema;
}

export interface CharacterMultiFightResultSchema {
  /** Name of the character. */
  character_name: string;
  /** XP gained by this character. */
  xp: number;
  /** Gold gained by this character. */
  gold: number;
  /** Items dropped for this character. */
  drops: DropSchema[];
  /** Character's HP at the end of combat. */
  final_hp: number;
}

export interface CharacterResponseSchema {
  data: CharacterSchema;
}

export interface CharacterRestDataSchema {
  /** Cooldown details */
  cooldown: CooldownSchema;
  /** The amount of HP restored. */
  hp_restored: number;
  /** Character details. */
  character: CharacterSchema;
}

export interface CharacterRestResponseSchema {
  data: CharacterRestDataSchema;
}

export interface CharacterSchema {
  /** Name of the character. */
  name: string;
  /** Account name. */
  account: string;
  /** Character skin code. */
  skin: CharacterSkin;
  /** Combat level. */
  level: number;
  /** The current xp level of the combat level. */
  xp: number;
  /** XP required to level up the character. */
  max_xp: number;
  /** The numbers of gold on this character. */
  gold: number;
  /** *Not available, on the roadmap. Character movement speed. */
  speed: number;
  /** Mining level. */
  mining_level: number;
  /** The current xp level of the Mining skill. */
  mining_xp: number;
  /** Mining XP required to level up the skill. */
  mining_max_xp: number;
  /** Woodcutting level. */
  woodcutting_level: number;
  /** The current xp level of the Woodcutting skill. */
  woodcutting_xp: number;
  /** Woodcutting XP required to level up the skill. */
  woodcutting_max_xp: number;
  /** Fishing level. */
  fishing_level: number;
  /** The current xp level of the Fishing skill. */
  fishing_xp: number;
  /** Fishing XP required to level up the skill. */
  fishing_max_xp: number;
  /** Weaponcrafting level. */
  weaponcrafting_level: number;
  /** The current xp level of the Weaponcrafting skill. */
  weaponcrafting_xp: number;
  /** Weaponcrafting XP required to level up the skill. */
  weaponcrafting_max_xp: number;
  /** Gearcrafting level. */
  gearcrafting_level: number;
  /** The current xp level of the Gearcrafting skill. */
  gearcrafting_xp: number;
  /** Gearcrafting XP required to level up the skill. */
  gearcrafting_max_xp: number;
  /** Jewelrycrafting level. */
  jewelrycrafting_level: number;
  /** The current xp level of the Jewelrycrafting skill. */
  jewelrycrafting_xp: number;
  /** Jewelrycrafting XP required to level up the skill. */
  jewelrycrafting_max_xp: number;
  /** The current xp level of the Cooking skill. */
  cooking_level: number;
  /** Cooking XP. */
  cooking_xp: number;
  /** Cooking XP required to level up the skill. */
  cooking_max_xp: number;
  /** Alchemy level. */
  alchemy_level: number;
  /** Alchemy XP. */
  alchemy_xp: number;
  /** Alchemy XP required to level up the skill. */
  alchemy_max_xp: number;
  /** Character actual HP. */
  hp: number;
  /** Character max HP. */
  max_hp: number;
  /** *Increase speed attack (reduce fight cooldown) */
  haste: number;
  /** % Critical strike. Critical strikes adds 50% extra damage to an attack (1.5x). */
  critical_strike: number;
  /** Wisdom increases the amount of XP gained from fights and skills (1% extra per 10 wisdom). */
  wisdom: number;
  /** Prospecting increases the chances of getting drops from fights and skills (1% extra per 10 PP). */
  prospecting: number;
  /** Initiative determines turn order in combat. Higher initiative goes first. */
  initiative: number;
  /** Threat level affects monster targeting in multi-character combat. */
  threat: number;
  /** Fire attack. */
  attack_fire: number;
  /** Earth attack. */
  attack_earth: number;
  /** Water attack. */
  attack_water: number;
  /** Air attack. */
  attack_air: number;
  /** % Damage. Damage increases your attack in all elements. */
  dmg: number;
  /** % Fire damage. Damage increases your fire attack. */
  dmg_fire: number;
  /** % Earth damage. Damage increases your earth attack. */
  dmg_earth: number;
  /** % Water damage. Damage increases your water attack. */
  dmg_water: number;
  /** % Air damage. Damage increases your air attack. */
  dmg_air: number;
  /** % Fire resistance. Reduces fire attack. */
  res_fire: number;
  /** % Earth resistance. Reduces earth attack. */
  res_earth: number;
  /** % Water resistance. Reduces water attack. */
  res_water: number;
  /** % Air resistance. Reduces air attack. */
  res_air: number;
  /** List of active effects on the character. */
  effects?: StorageEffectSchema[];
  /** Character x coordinate. */
  x: number;
  /** Character y coordinate. */
  y: number;
  /** Character current layer. */
  layer: MapLayer;
  /** Character current map ID. */
  map_id: number;
  /** Cooldown in seconds. */
  cooldown: number;
  /** Datetime Cooldown expiration. */
  cooldown_expiration?: string;
  /** Weapon slot. */
  weapon_slot: string;
  /** Rune slot. */
  rune_slot: string;
  /** Shield slot. */
  shield_slot: string;
  /** Helmet slot. */
  helmet_slot: string;
  /** Body armor slot. */
  body_armor_slot: string;
  /** Leg armor slot. */
  leg_armor_slot: string;
  /** Boots slot. */
  boots_slot: string;
  /** Ring 1 slot. */
  ring1_slot: string;
  /** Ring 2 slot. */
  ring2_slot: string;
  /** Amulet slot. */
  amulet_slot: string;
  /** Artifact 1 slot. */
  artifact1_slot: string;
  /** Artifact 2 slot. */
  artifact2_slot: string;
  /** Artifact 3 slot. */
  artifact3_slot: string;
  /** Utility 1 slot. */
  utility1_slot: string;
  /**
   * Utility 1 quantity.
   * @minimum 0
   */
  utility1_slot_quantity: number;
  /** Utility 2 slot. */
  utility2_slot: string;
  /**
   * Utility 2 quantity.
   * @minimum 0
   */
  utility2_slot_quantity: number;
  /** Bag slot. */
  bag_slot: string;
  /** Task in progress. */
  task: string;
  /** Task type. */
  task_type: string;
  /** Task progression. */
  task_progress: number;
  /** Task total objective. */
  task_total: number;
  /** Inventory max items. */
  inventory_max_items: number;
  /** List of inventory slots. */
  inventory?: InventorySlot[];
}

export type CharacterSkin = typeof CharacterSkin[keyof typeof CharacterSkin];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CharacterSkin = {
  men1: 'men1',
  men2: 'men2',
  men3: 'men3',
  women1: 'women1',
  women2: 'women2',
  women3: 'women3',
  corrupted1: 'corrupted1',
  zombie1: 'zombie1',
} as const;

export interface CharacterTransitionDataSchema {
  /** Cooldown details */
  cooldown: CooldownSchema;
  /** Destination map details. */
  destination: MapSchema;
  /** Transition details. */
  transition: TransitionSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface CharacterTransitionResponseSchema {
  data: CharacterTransitionDataSchema;
}

export interface CharactersListSchema {
  /** List of your characters. */
  data: CharacterSchema[];
}

export type CombatResultSchemaCharacterResultsItem = { [key: string]: unknown };

export interface CombatResultSchema {
  /** Combat result: 'win' or 'loss'. */
  result: string;
  /** Number of turns the combat lasted. */
  turns: number;
  /** Combat logs. */
  logs: string[];
  /** Character results from combat. */
  character_results: CombatResultSchemaCharacterResultsItem[];
}

export interface CombatSimulationDataSchema {
  /** Results from each combat iteration. */
  results: CombatResultSchema[];
  /** Total number of victories. */
  wins: number;
  /** Total number of defeats. */
  losses: number;
  /** Win rate percentage (0-100). */
  winrate: number;
}

export interface CombatSimulationRequestSchema {
  /**
   * List of fake characters (1-3).
   * @minItems 1
   * @maxItems 3
   */
  characters: FakeCharacterSchema[];
  /**
   * Monster code to fight against.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  monster: string;
  /**
   * Number of combat iterations to simulate.
   * @minimum 1
   * @maximum 100
   */
  iterations: number;
}

export interface CombatSimulationResponseSchema {
  /** Combat simulation results. */
  data: CombatSimulationDataSchema;
}

export type ConditionOperator = typeof ConditionOperator[keyof typeof ConditionOperator];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConditionOperator = {
  eq: 'eq',
  ne: 'ne',
  gt: 'gt',
  lt: 'lt',
  cost: 'cost',
  has_item: 'has_item',
  achievement_unlocked: 'achievement_unlocked',
} as const;

export interface ConditionSchema {
  /** Condition code. */
  code: string;
  /** Condition operator. */
  operator: ConditionOperator;
  /** Condition value. */
  value: string;
}

export interface CooldownSchema {
  /** The total seconds of the cooldown. */
  total_seconds: number;
  /** The remaining seconds of the cooldown. */
  remaining_seconds: number;
  /** The start of the cooldown. */
  started_at: string;
  /** The expiration of the cooldown. */
  expiration: string;
  /** The reason of the cooldown. */
  reason: ActionType;
}

export interface CraftSchema {
  /** Skill required to craft the item. */
  skill?: CraftSkill;
  /** The skill level required to craft the item. */
  level?: number;
  /** List of items required to craft the item. */
  items?: SimpleItemSchema[];
  /** Quantity of items crafted. */
  quantity?: number;
}

export type CraftSkill = typeof CraftSkill[keyof typeof CraftSkill];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CraftSkill = {
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  woodcutting: 'woodcutting',
  mining: 'mining',
  alchemy: 'alchemy',
} as const;

export interface CraftingSchema {
  /**
   * Craft code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Quantity of items to craft.
   * @minimum 1
   */
  quantity?: number;
}

export interface DataPageAccountAchievementSchema {
  data: AccountAchievementSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageAccountLeaderboardSchema {
  data: AccountLeaderboardSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageAchievementSchema {
  data: AchievementSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageActiveCharacterSchema {
  data: ActiveCharacterSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageActiveEventSchema {
  data: ActiveEventSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageBadgeSchema {
  data: BadgeSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageCharacterLeaderboardSchema {
  data: CharacterLeaderboardSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageDropRateSchema {
  data: DropRateSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageEffectSchema {
  data: EffectSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageEventSchema {
  data: EventSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageGEOrderSchema {
  data: GEOrderSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageGeOrderHistorySchema {
  data: GeOrderHistorySchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageItemSchema {
  data: ItemSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageLogSchema {
  data: LogSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageMapSchema {
  data: MapSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageMonsterSchema {
  data: MonsterSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageNPCItem {
  data: NPCItem[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageNPCSchema {
  data: NPCSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageResourceSchema {
  data: ResourceSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageSimpleItemSchema {
  data: SimpleItemSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DataPageTaskFullSchema {
  data: TaskFullSchema[];
  /**
   * @minimum 0
   * @nullable
   */
  total?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  page?: number | null;
  /**
   * @minimum 1
   * @nullable
   */
  size?: number | null;
  /**
   * @minimum 0
   * @nullable
   */
  pages?: number | null;
}

export interface DeleteCharacterSchema {
  /**
   * Character name.
   * @minLength 3
   * @maxLength 12
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  name: string;
}

export interface DeleteItemResponseSchema {
  data: DeleteItemSchema;
}

export interface DeleteItemSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item details. */
  item: SimpleItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface DepositWithdrawGoldSchema {
  /**
   * Quantity of gold.
   * @minimum 1
   */
  quantity: number;
}

export interface DestinationSchema {
  /** The x coordinate of the destination. */
  x?: number;
  /** The y coordinate of the destination. */
  y?: number;
  /** The map ID of the destination. */
  map_id?: number;
}

export interface DropRateSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Chance rate. (1/rate)
   * @minimum 1
   */
  rate: number;
  /**
   * Minimum quantity.
   * @minimum 1
   */
  min_quantity: number;
  /**
   * Maximum quantity.
   * @minimum 1
   */
  max_quantity: number;
}

export interface DropSchema {
  /** The code of the item. */
  code: string;
  /** The quantity of the item. */
  quantity: number;
}

export interface EffectResponseSchema {
  data: EffectSchema;
}

export interface EffectSchema {
  /** Name of the effect. */
  name: string;
  /** The code of the effect. This is the effect's unique identifier (ID). */
  code: string;
  /** Description of the effect. This is a brief description of the effect. */
  description: string;
  /** Type of the effect. */
  type: EffectType;
  /** Subtype of the effect. */
  subtype: EffectSubtype;
}

export type EffectSubtype = typeof EffectSubtype[keyof typeof EffectSubtype];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EffectSubtype = {
  stat: 'stat',
  other: 'other',
  heal: 'heal',
  buff: 'buff',
  debuff: 'debuff',
  special: 'special',
  gathering: 'gathering',
  teleport: 'teleport',
  gold: 'gold',
} as const;

export type EffectType = typeof EffectType[keyof typeof EffectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EffectType = {
  equipment: 'equipment',
  consumable: 'consumable',
  combat: 'combat',
} as const;

export interface EquipRequestSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item slot. */
  slot: ItemSlot;
  /** Item details. */
  item: ItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface EquipSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /** Item slot. */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilities only.
   * @minimum 1
   * @maximum 100
   */
  quantity?: number;
}

export interface EquipmentResponseSchema {
  data: EquipRequestSchema;
}

export interface EventContentSchema {
  /** Type of the event. */
  type: MapContentType;
  /** Code content. */
  code: string;
}

export interface EventMapSchema {
  /** ID of the map. */
  map_id: number;
  /** Position X of the map. */
  x: number;
  /** Position Y of the map. */
  y: number;
  /** Layer of the map. */
  layer: string;
  /** Map skin of the map */
  skin: string;
}

export interface EventSchema {
  /** Name of the event. */
  name: string;
  /** Code of the event. */
  code: string;
  /** Content of the event. */
  content: EventContentSchema;
  /** Map list of the event. */
  maps: EventMapSchema[];
  /** Duration in minutes. */
  duration: number;
  /** Rate spawn of the event. (1/rate every minute) */
  rate: number;
}

export interface FakeCharacterSchema {
  /**
   * Character level.
   * @minimum 1
   * @maximum 50
   */
  level: number;
  /**
   * Weapon slot item code.
   * @nullable
   */
  weapon_slot?: string | null;
  /**
   * Rune slot item code.
   * @nullable
   */
  rune_slot?: string | null;
  /**
   * Shield slot item code.
   * @nullable
   */
  shield_slot?: string | null;
  /**
   * Helmet slot item code.
   * @nullable
   */
  helmet_slot?: string | null;
  /**
   * Body armor slot item code.
   * @nullable
   */
  body_armor_slot?: string | null;
  /**
   * Leg armor slot item code.
   * @nullable
   */
  leg_armor_slot?: string | null;
  /**
   * Boots slot item code.
   * @nullable
   */
  boots_slot?: string | null;
  /**
   * Ring 1 slot item code.
   * @nullable
   */
  ring1_slot?: string | null;
  /**
   * Ring 2 slot item code.
   * @nullable
   */
  ring2_slot?: string | null;
  /**
   * Amulet slot item code.
   * @nullable
   */
  amulet_slot?: string | null;
  /**
   * Artifact 1 slot item code.
   * @nullable
   */
  artifact1_slot?: string | null;
  /**
   * Artifact 2 slot item code.
   * @nullable
   */
  artifact2_slot?: string | null;
  /**
   * Artifact 3 slot item code.
   * @nullable
   */
  artifact3_slot?: string | null;
  /**
   * Utility 1 slot item code.
   * @nullable
   */
  utility1_slot?: string | null;
  /**
   * Utility 1 quantity.
   * @minimum 1
   * @maximum 100
   */
  utility1_slot_quantity?: number;
  /**
   * Utility 2 slot item code.
   * @nullable
   */
  utility2_slot?: string | null;
  /**
   * Utility 2 quantity.
   * @minimum 1
   * @maximum 100
   */
  utility2_slot_quantity?: number;
}

export interface FightRequestSchema {
  /**
   * Optional list of additional character names to include in the fight (max 2 additional characters).
   * @maxItems 2
   */
  participants?: string[];
}

export type FightResult = typeof FightResult[keyof typeof FightResult];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FightResult = {
  win: 'win',
  loss: 'loss',
} as const;

export interface GEBuyOrderSchema {
  /** Order id. */
  id: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
}

export interface GECancelOrderSchema {
  /** Order id. */
  id: string;
}

export interface GECreateOrderTransactionResponseSchema {
  data: GEOrderTransactionSchema;
}

export interface GEOrderCreatedSchema {
  /** Order id. */
  id: string;
  /** Order created at. */
  created_at: string;
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /**
   * Total price.
   * @minimum 1
   */
  total_price: number;
  /**
   * Listing tax (3%, minimum 1)
   * @minimum 1
   */
  tax: number;
}

export interface GEOrderCreationrSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   * @maximum 1000000000
   */
  price: number;
}

export interface GEOrderResponseSchema {
  data: GEOrderSchema;
}

export interface GEOrderSchema {
  /** Order id. */
  id: string;
  /** Seller account name. */
  seller: string;
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /** Order created at. */
  created_at: string;
}

export interface GEOrderTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Order details. */
  order: GEOrderCreatedSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GETransactionListSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  order: GETransactionSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GETransactionResponseSchema {
  data: GETransactionListSchema;
}

export interface GETransactionSchema {
  /** Order id. */
  id: string;
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
  /** Item price. */
  price: number;
  /** Total price of the transaction. */
  total_price: number;
}

export type GatheringSkill = typeof GatheringSkill[keyof typeof GatheringSkill];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GatheringSkill = {
  mining: 'mining',
  woodcutting: 'woodcutting',
  fishing: 'fishing',
  alchemy: 'alchemy',
} as const;

export interface GeOrderHistorySchema {
  /** Order id. */
  order_id: string;
  /** Seller account name. */
  seller: string;
  /** Buyer account name. */
  buyer: string;
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
  /**
   * Item price per unit.
   * @minimum 1
   */
  price: number;
  /** Sale datetime. */
  sold_at: string;
}

export interface GiveGoldDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /**
   * Quantity of gold given.
   * @minimum 1
   * @maximum 1000000
   */
  quantity: number;
  /** Character details of the receiving character. */
  receiver_character: CharacterSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface GiveGoldResponseSchema {
  data: GiveGoldDataSchema;
}

export interface GiveGoldSchema {
  /**
   * Gold quantity.
   * @minimum 1
   */
  quantity: number;
  /**
   * Character name. The name of the character who will receive the gold.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  character: string;
}

export interface GiveItemDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Items given. */
  items: SimpleItemSchema[];
  /** Character details of the receiving character. */
  receiver_character: CharacterSchema;
  /** Character details of the sending character. */
  character: CharacterSchema;
}

export interface GiveItemResponseSchema {
  data: GiveItemDataSchema;
}

export interface GiveItemsSchema {
  /**
   * List of items to give
   * @minItems 1
   * @maxItems 20
   */
  items: SimpleItemSchema[];
  /**
   * Character name. The name of the character who will receive the items.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  character: string;
}

export interface GoldSchema {
  /**
   * Quantity of gold.
   * @minimum 0
   */
  quantity: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface InteractionSchema {
  /**
   * Content of the map.
   * @nullable
   */
  content?: MapContentSchema;
  /**
   * Transition to another map.
   * @nullable
   */
  transition?: TransitionSchema;
}

export interface InventorySlot {
  /** Inventory slot identifier. */
  slot: number;
  /** Item code. */
  code: string;
  /** Quantity in the slot. */
  quantity: number;
}

export interface ItemResponseSchema {
  data: ItemSchema;
}

export interface ItemSchema {
  /** Item name. */
  name: string;
  /** Item code. This is the item's unique identifier (ID). */
  code: string;
  /**
   * Item level.
   * @minimum 1
   */
  level: number;
  /** Item type. */
  type: string;
  /** Item subtype. */
  subtype: string;
  /** Item description. */
  description: string;
  /** Item conditions. If applicable. Conditions for using or equipping the item. */
  conditions?: ConditionSchema[];
  /** List of object effects. For equipment, it will include item stats. */
  effects?: SimpleEffectSchema[];
  /**
   * Craft information. If applicable.
   * @nullable
   */
  craft?: CraftSchema;
  /** Item tradeable status. A non-tradeable item cannot be exchanged or sold. */
  tradeable: boolean;
}

export type ItemSlot = typeof ItemSlot[keyof typeof ItemSlot];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemSlot = {
  weapon: 'weapon',
  shield: 'shield',
  helmet: 'helmet',
  body_armor: 'body_armor',
  leg_armor: 'leg_armor',
  boots: 'boots',
  ring1: 'ring1',
  ring2: 'ring2',
  amulet: 'amulet',
  artifact1: 'artifact1',
  artifact2: 'artifact2',
  artifact3: 'artifact3',
  utility1: 'utility1',
  utility2: 'utility2',
  bag: 'bag',
  rune: 'rune',
} as const;

export type ItemType = typeof ItemType[keyof typeof ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemType = {
  utility: 'utility',
  body_armor: 'body_armor',
  weapon: 'weapon',
  resource: 'resource',
  leg_armor: 'leg_armor',
  helmet: 'helmet',
  boots: 'boots',
  shield: 'shield',
  amulet: 'amulet',
  ring: 'ring',
  artifact: 'artifact',
  currency: 'currency',
  consumable: 'consumable',
  rune: 'rune',
  bag: 'bag',
} as const;

export interface LogSchema {
  /** Character name. */
  character: string;
  /** Account character. */
  account: string;
  /** Type of action. */
  type: LogType;
  /** Description of action. */
  description: string;
  /** Content of action. */
  content: unknown;
  /** Cooldown in seconds. */
  cooldown: number;
  /**
   * Datetime of cooldown expiration.
   * @nullable
   */
  cooldown_expiration?: string | null;
  /** Datetime of creation. */
  created_at: string;
}

export type LogType = typeof LogType[keyof typeof LogType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogType = {
  spawn: 'spawn',
  movement: 'movement',
  fight: 'fight',
  multi_fight: 'multi_fight',
  crafting: 'crafting',
  gathering: 'gathering',
  buy_ge: 'buy_ge',
  sell_ge: 'sell_ge',
  buy_npc: 'buy_npc',
  sell_npc: 'sell_npc',
  cancel_ge: 'cancel_ge',
  delete_item: 'delete_item',
  deposit_item: 'deposit_item',
  withdraw_item: 'withdraw_item',
  deposit_gold: 'deposit_gold',
  withdraw_gold: 'withdraw_gold',
  equip: 'equip',
  unequip: 'unequip',
  new_task: 'new_task',
  task_exchange: 'task_exchange',
  task_cancelled: 'task_cancelled',
  task_completed: 'task_completed',
  task_trade: 'task_trade',
  recycling: 'recycling',
  rest: 'rest',
  use: 'use',
  buy_bank_expansion: 'buy_bank_expansion',
  achievement: 'achievement',
  give_item: 'give_item',
  give_gold: 'give_gold',
  receive_item: 'receive_item',
  receive_gold: 'receive_gold',
  change_skin: 'change_skin',
  rename: 'rename',
  transition: 'transition',
} as const;

export type MapAccessType = typeof MapAccessType[keyof typeof MapAccessType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapAccessType = {
  standard: 'standard',
  teleportation: 'teleportation',
  conditional: 'conditional',
  blocked: 'blocked',
} as const;

export interface MapContentSchema {
  /** Type of the content. */
  type: MapContentType;
  /** Code of the content. */
  code: string;
}

export type MapContentType = typeof MapContentType[keyof typeof MapContentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapContentType = {
  monster: 'monster',
  resource: 'resource',
  workshop: 'workshop',
  bank: 'bank',
  grand_exchange: 'grand_exchange',
  tasks_master: 'tasks_master',
  npc: 'npc',
} as const;

export type MapLayer = typeof MapLayer[keyof typeof MapLayer];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapLayer = {
  interior: 'interior',
  overworld: 'overworld',
  underground: 'underground',
} as const;

export interface MapResponseSchema {
  data: MapSchema;
}

export interface MapSchema {
  /** ID of the map. */
  map_id: number;
  /** Name of the map. */
  name: string;
  /** Skin of the map. */
  skin: string;
  /** Position X of the map. */
  x: number;
  /** Position Y of the map. */
  y: number;
  /** Layer of the map. */
  layer: MapLayer;
  /** Access information for the map */
  access: AccessSchema;
  /** Interactions available on this map. */
  interactions: InteractionSchema;
}

export interface MonsterResponseSchema {
  data: MonsterSchema;
}

export interface MonsterSchema {
  /** Name of the monster. */
  name: string;
  /** The code of the monster. This is the monster's unique identifier (ID). */
  code: string;
  /** Monster level. */
  level: number;
  /** Monster type. */
  type: MonsterType;
  /** Monster hit points. */
  hp: number;
  /** Monster fire attack. */
  attack_fire: number;
  /** Monster earth attack. */
  attack_earth: number;
  /** Monster water attack. */
  attack_water: number;
  /** Monster air attack. */
  attack_air: number;
  /** Monster % fire resistance. */
  res_fire: number;
  /** Monster % earth resistance. */
  res_earth: number;
  /** Monster % water resistance. */
  res_water: number;
  /** Monster % air resistance. */
  res_air: number;
  /** Monster % critical strike. */
  critical_strike: number;
  /** Monster initiative for turn order. */
  initiative: number;
  /** List of effects. */
  effects?: SimpleEffectSchema[];
  /** Monster minimum gold drop.  */
  min_gold: number;
  /** Monster maximum gold drop.  */
  max_gold: number;
  /** Monster drops. This is a list of items that the monster drops after killing the monster.  */
  drops: DropRateSchema[];
}

export type MonsterType = typeof MonsterType[keyof typeof MonsterType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MonsterType = {
  normal: 'normal',
  elite: 'elite',
  boss: 'boss',
} as const;

export interface MyAccountDetails {
  /** Username. */
  username: string;
  /** Email. */
  email: string;
  /** Member status. */
  member: boolean;
  /**
   * Member expiration date.
   * @nullable
   */
  member_expiration?: string | null;
  /** Account status. */
  status: AccountStatus;
  /** Account badges. */
  badges?: unknown[];
  /** Skins owned. */
  skins: unknown[];
  /** Gems. */
  gems: number;
  /** Event tokens for spawning events. */
  event_token: number;
  /** Achievement points. */
  achievements_points: number;
  /** Banned. */
  banned: boolean;
  /** Ban reason. */
  ban_reason?: string;
}

export interface MyAccountDetailsSchema {
  data: MyAccountDetails;
}

export interface MyCharactersListSchema {
  /** List of your characters. */
  data: CharacterSchema[];
}

export interface NPCItem {
  /** The code of the NPC. This is the NPC's unique identifier (ID). */
  code: string;
  /** Code of the NPC that sells/buys the item. */
  npc: string;
  /** Currency used to buy/sell the item. If it's not gold, it's the item code. */
  currency: string;
  /**
   * Price to buy the item.
   * @nullable
   */
  buy_price?: number | null;
  /**
   * Price to sell the item.
   * @nullable
   */
  sell_price?: number | null;
}

export interface NPCResponseSchema {
  data: NPCSchema;
}

export interface NPCSchema {
  /** Name of the NPC. */
  name: string;
  /** The code of the NPC. This is the NPC's unique identifier (ID). */
  code: string;
  /** Description of the NPC. */
  description: string;
  /** Type of the NPC. */
  type: NPCType;
}

export type NPCType = typeof NPCType[keyof typeof NPCType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NPCType = {
  merchant: 'merchant',
  trader: 'trader',
} as const;

export interface NpcItemTransactionSchema {
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
  /** Currency used for the transaction. */
  currency: string;
  /** Item price. */
  price: number;
  /** Total price of the transaction. */
  total_price: number;
}

export interface NpcMerchantBuySchema {
  /** Item code. */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   * @maximum 100
   */
  quantity: number;
}

export interface NpcMerchantTransactionResponseSchema {
  data: NpcMerchantTransactionSchema;
}

export interface NpcMerchantTransactionSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Transaction details. */
  transaction: NpcItemTransactionSchema;
  /** Character details. */
  character: CharacterSchema;
}

export interface PasswordResetConfirmSchema {
  /** Password reset token. */
  token: string;
  /**
   * Your new password.
   * @minLength 5
   * @maxLength 50
   * @pattern ^[^\s]+$
   */
  new_password: string;
}

export interface PasswordResetRequestSchema {
  /** Your email address. */
  email: string;
}

export interface PasswordResetResponseSchema {
  /** Success message. */
  message: string;
}

export interface RateLimitSchema {
  /** Type of rate limit. */
  type: string;
  /** Value of the rate limit. */
  value: string;
}

export interface RecyclingDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  details: RecyclingItemsSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface RecyclingItemsSchema {
  /** Objects received. */
  items: DropSchema[];
}

export interface RecyclingResponseSchema {
  data: RecyclingDataSchema;
}

export interface RecyclingSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Quantity of items to recycle.
   * @minimum 1
   */
  quantity?: number;
}

export interface ResourceResponseSchema {
  data: ResourceSchema;
}

export interface ResourceSchema {
  /** The name of the resource */
  name: string;
  /** The code of the resource. This is the resource's unique identifier (ID). */
  code: string;
  /** The skill required to gather this resource. */
  skill: GatheringSkill;
  /** The skill level required to gather this resource. */
  level: number;
  /** The drops of this resource. */
  drops: DropRateSchema[];
}

export interface ResponseSchema {
  message: string;
}

export interface RewardDataResponseSchema {
  data: RewardDataSchema;
}

export interface RewardDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Reward details. */
  rewards: RewardsSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface RewardResponseSchema {
  data: DropRateSchema;
}

export interface RewardsSchema {
  /** Items rewards. */
  items: SimpleItemSchema[];
  /** Gold rewards. */
  gold: number;
}

export interface SandboxGiveItemSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   */
  quantity: number;
  /**
   * Character name. The name of the character who will receive the item.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  character: string;
}

export interface SandboxGiveXpSchema {
  /** Type of XP to give (e.g., 'combat', 'woodcutting', 'mining', etc.). */
  type: XPType;
  /**
   * Amount of XP to give to the character.
   * @maximum 100000
   */
  amount: number;
  /** Name of the character to receive the XP. */
  character: string;
}

export interface SandboxResponseSchema {
  /** Sandbox action data. */
  data: SandboxSchema;
}

export interface SandboxSchema {
  /** Character details. */
  character: CharacterSchema;
}

export interface SeasonBadgeSchema {
  /** Badge code. */
  code: string;
  /** Badge description. */
  description: string;
  /** Required achievement points to earn the badge. */
  required_points: number;
}

export interface SeasonSchema {
  /** Season name. */
  name?: string;
  /** Season number. */
  number?: number;
  /** Season start date. */
  start_date?: string;
  /** Season badges with required achievement points. */
  badges: SeasonBadgeSchema[];
  /** Season skins with required achievement points. */
  skins: SeasonSkinSchema[];
}

export interface SeasonSkinSchema {
  /** Skin code. */
  code: string;
  /** Skin description. */
  description: string;
  /** Required achievement points to earn the skin. */
  required_points: number;
}

export interface SimpleEffectSchema {
  /**
   * Effect code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /** Effect value. */
  value: number;
  /** Description of the effect. */
  description: string;
}

export interface SimpleItemSchema {
  /**
   * Item code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /**
   * Item quantity.
   * @minimum 1
   */
  quantity: number;
}

export type Skill = typeof Skill[keyof typeof Skill];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Skill = {
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  woodcutting: 'woodcutting',
  mining: 'mining',
  alchemy: 'alchemy',
  fishing: 'fishing',
} as const;

export interface SkillDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Craft details. */
  details: SkillInfoSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface SkillInfoSchema {
  /** The amount of xp gained. */
  xp: number;
  /** Objects received. */
  items: DropSchema[];
}

export interface SkillResponseSchema {
  data: SkillDataSchema;
}

/**
 * Model for the request to spawn a specific event
 */
export interface SpawnEventRequest {
  /** Code of the event to spawn */
  code: string;
}

export interface StatusResponseSchema {
  data: StatusSchema;
}

export interface StatusSchema {
  /** Game version. */
  version: string;
  /** Server time. */
  server_time: string;
  /** Maximum level. */
  max_level: number;
  /** Maximum skill level. */
  max_skill_level: number;
  /** Characters online. */
  characters_online: number;
  /** Current season details. */
  season?: SeasonSchema;
  /** Server announcements. */
  announcements: AnnouncementSchema[];
  /** Rate limits. */
  rate_limits: RateLimitSchema[];
}

export interface StorageEffectSchema {
  /**
   * Effect code.
   * @pattern ^[a-zA-Z0-9_-]+$
   */
  code: string;
  /** Effect value. */
  value: number;
}

export interface TaskCancelledResponseSchema {
  data: TaskCancelledSchema;
}

export interface TaskCancelledSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Task details. */
  task: TaskSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskFullResponseSchema {
  data: TaskFullSchema;
}

export interface TaskFullSchema {
  /** Task objective. */
  code: string;
  /** Task level. */
  level: number;
  /** The type of task. */
  type: TaskType;
  /** Minimum amount of task. */
  min_quantity: number;
  /** Maximum amount of task. */
  max_quantity: number;
  /**
   * Skill required to complete the task.
   * @nullable
   */
  skill?: string | null;
  /** Rewards. */
  rewards: RewardsSchema;
}

export interface TaskResponseSchema {
  data: TaskDataSchema;
}

export interface TaskSchema {
  /** Task objective. */
  code: string;
  /** The type of task. */
  type: TaskType;
  /** The total required to complete the task. */
  total: number;
  /** Rewards for completing the task. */
  rewards: RewardsSchema;
}

export interface TaskTradeDataSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Reward details. */
  trade: TaskTradeSchema;
  /** Player details. */
  character: CharacterSchema;
}

export interface TaskTradeResponseSchema {
  data: TaskTradeDataSchema;
}

export interface TaskTradeSchema {
  /** Item code. */
  code: string;
  /** Item quantity. */
  quantity: number;
}

export type TaskType = typeof TaskType[keyof typeof TaskType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskType = {
  monsters: 'monsters',
  items: 'items',
} as const;

export interface TokenResponseSchema {
  token: string;
}

export interface TransitionSchema {
  /** ID of the destination map. */
  map_id: number;
  /** Position X of the destination. */
  x: number;
  /** Position Y of the destination. */
  y: number;
  /** Layer of the destination. */
  layer: MapLayer;
  /**
   * Conditions for the transition.
   * @nullable
   */
  conditions?: ConditionSchema[] | null;
}

export interface UnequipSchema {
  /** Item slot. */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilities only.
   * @minimum 1
   * @maximum 100
   */
  quantity?: number;
}

export interface UseItemResponseSchema {
  data: UseItemSchema;
}

export interface UseItemSchema {
  /** Cooldown details. */
  cooldown: CooldownSchema;
  /** Item details. */
  item: ItemSchema;
  /** Player details. */
  character: CharacterSchema;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type XPType = typeof XPType[keyof typeof XPType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XPType = {
  combat: 'combat',
  weaponcrafting: 'weaponcrafting',
  gearcrafting: 'gearcrafting',
  jewelrycrafting: 'jewelrycrafting',
  cooking: 'cooking',
  woodcutting: 'woodcutting',
  mining: 'mining',
  alchemy: 'alchemy',
  fishing: 'fishing',
} as const;

/**
 * Additional error data (used primarily for validation errors)
 */
export type ErrorSchemaData = { [key: string]: unknown };

export interface ErrorSchema {
  /** Error code */
  code: number;
  /** Error message */
  message: string;
  /** Additional error data (used primarily for validation errors) */
  data?: ErrorSchemaData;
}

export interface ErrorResponseSchema {
  error: ErrorSchema;
}

export type GetBankItemsMyBankItemsGetParams = {
/**
 * Item to search in your bank.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
item_code?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetGeSellOrdersMyGrandexchangeOrdersGetParams = {
/**
 * The code of the item.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
code?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetGeSellHistoryMyGrandexchangeHistoryGetParams = {
/**
 * Order ID to search in your history.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
id?: string;
/**
 * Item to search in your history.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
code?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllCharactersLogsMyLogsGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetCharacterLogsMyLogsNameGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAccountAchievementsAccountsAccountAchievementsGetParams = {
/**
 * Type of achievements.
 */
type?: AchievementType;
/**
 * Filter by completed achievements.
 */
completed?: boolean;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllAchievementsAchievementsGetParams = {
/**
 * Type of achievements.
 */
type?: AchievementType;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllBadgesBadgesGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetActiveCharactersCharactersActiveGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllEffectsEffectsGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllActiveEventsEventsActiveGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllEventsEventsGetParams = {
/**
 * Type of events.
 */
type?: MapContentType;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetGeSellHistoryGrandexchangeHistoryCodeGetParams = {
/**
 * The seller (account name) of the item.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
seller?: string;
/**
 * The buyer (account name) of the item.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
buyer?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetGeSellOrdersGrandexchangeOrdersGetParams = {
/**
 * The code of the item.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
code?: string;
/**
 * The seller (account name) of the item.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
seller?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllItemsItemsGetParams = {
/**
 * Name of the item.
 * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
 */
name?: string;
/**
 * Minimum level.
 * @minimum 0
 */
min_level?: number;
/**
 * Maximum level.
 * @minimum 0
 */
max_level?: number;
/**
 * Type of items.
 */
type?: ItemType;
/**
 * Skill to craft items.
 */
craft_skill?: CraftSkill;
/**
 * Item code of items used as material for crafting.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
craft_material?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetCharactersLeaderboardLeaderboardCharactersGetParams = {
/**
 * Sort of character leaderboards.
 */
sort?: CharacterLeaderboardType;
/**
 * Character name.
 * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
 */
name?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAccountsLeaderboardLeaderboardAccountsGetParams = {
/**
 * Sort of account leaderboards.
 */
sort?: AccountLeaderboardType;
/**
 * Account name.
 * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
 */
name?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllMapsMapsGetParams = {
/**
 * Filter maps by layer.
 */
layer?: MapLayer;
/**
 * Type of maps.
 */
content_type?: MapContentType;
/**
 * Content code on the map.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
content_code?: string;
/**
 * When true, excludes maps with access_type 'blocked' from the results.
 */
hide_blocked_maps?: boolean;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetLayerMapsMapsLayerGetParams = {
/**
 * Type of maps.
 */
content_type?: MapContentType;
/**
 * Content code on the map.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
content_code?: string;
/**
 * When true, excludes maps with access_type 'blocked' from the results.
 */
hide_blocked_maps?: boolean;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllMonstersMonstersGetParams = {
/**
 * Name of the monster.
 * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
 */
name?: string;
/**
 * Minimum level.
 * @minimum 0
 */
min_level?: number;
/**
 * Maximum level.
 * @minimum 0
 */
max_level?: number;
/**
 * Item code of the drop.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
drop?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllNpcsNpcsDetailsGetParams = {
/**
 * NPC name.
 * @pattern ^[a-zA-Z0-9_-]+(\s[a-zA-Z0-9_-]+)*\s?$
 */
name?: string;
/**
 * Type of NPCs.
 */
type?: NPCType;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetNpcItemsNpcsItemsCodeGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllNpcsItemsNpcsItemsGetParams = {
/**
 * Item code.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
code?: string;
/**
 * NPC code.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
npc?: string;
/**
 * Currency code.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
currency?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllResourcesResourcesGetParams = {
/**
 * Minimum level.
 * @minimum 0
 */
min_level?: number;
/**
 * Maximum level.
 * @minimum 0
 */
max_level?: number;
/**
 * Skill of resources.
 */
skill?: GatheringSkill;
/**
 * Item code of the drop.
 * @pattern ^[a-zA-Z0-9_-]+$
 */
drop?: string;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllTasksTasksListGetParams = {
/**
 * Minimum level.
 * @minimum 0
 */
min_level?: number;
/**
 * Maximum level.
 * @minimum 0
 */
max_level?: number;
/**
 * Skill of tasks.
 */
skill?: Skill;
/**
 * Type of tasks.
 */
type?: TaskType;
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

export type GetAllTasksRewardsTasksRewardsGetParams = {
/**
 * Page number
 * @minimum 1
 */
page?: number;
/**
 * Page size
 * @minimum 1
 * @maximum 100
 */
size?: number;
};

/**
 * Return the status of the game server.
 * @summary Get Server Details
 */
export const getServerDetailsGet = <TData = AxiosResponse<StatusResponseSchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/`,options
    );
  }

/**
 * Fetch bank details.
 * @summary Get Bank Details
 */
export const getBankDetailsMyBankGet = <TData = AxiosResponse<BankResponseSchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/bank`,options
    );
  }

/**
 * Fetch all items in your bank.
 * @summary Get Bank Items
 */
export const getBankItemsMyBankItemsGet = <TData = AxiosResponse<DataPageSimpleItemSchema>>(
    params?: GetBankItemsMyBankItemsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/bank/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch your sell orders details.
 * @summary Get Ge Sell Orders
 */
export const getGeSellOrdersMyGrandexchangeOrdersGet = <TData = AxiosResponse<DataPageGEOrderSchema>>(
    params?: GetGeSellOrdersMyGrandexchangeOrdersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/grandexchange/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch your sales history of the last 7 days.
 * @summary Get Ge Sell History
 */
export const getGeSellHistoryMyGrandexchangeHistoryGet = <TData = AxiosResponse<DataPageGeOrderHistorySchema>>(
    params?: GetGeSellHistoryMyGrandexchangeHistoryGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/grandexchange/history`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch account details.
 * @summary Get Account Details
 */
export const getAccountDetailsMyDetailsGet = <TData = AxiosResponse<MyAccountDetailsSchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/details`,options
    );
  }

/**
 * Change your account password. Changing the password reset the account token.
 * @summary Change Password
 */
export const changePasswordMyChangePasswordPost = <TData = AxiosResponse<ResponseSchema>>(
    changePassword: ChangePassword, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/change_password`,
      changePassword,options
    );
  }

/**
 * Moves a character on the map using either the map's ID or X and Y position.
Provide either 'map_id' or both 'x' and 'y' coordinates in the request body.
 * @summary Action Move
 */
export const actionMoveMyNameActionMovePost = <TData = AxiosResponse<CharacterMovementResponseSchema>>(
    name: string,
    destinationSchema: DestinationSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/move`,
      destinationSchema,options
    );
  }

/**
 * Execute a transition from the current map to another layer.
The character must be on a map that has a transition available.
 * @summary Action Transition
 */
export const actionTransitionMyNameActionTransitionPost = <TData = AxiosResponse<CharacterTransitionResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/transition`,undefined,options
    );
  }

/**
 * Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds)
 * @summary Action Rest
 */
export const actionRestMyNameActionRestPost = <TData = AxiosResponse<CharacterRestResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/rest`,undefined,options
    );
  }

/**
 * Equip an item on your character.
 * @summary Action Equip Item
 */
export const actionEquipItemMyNameActionEquipPost = <TData = AxiosResponse<EquipmentResponseSchema>>(
    name: string,
    equipSchema: EquipSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/equip`,
      equipSchema,options
    );
  }

/**
 * Unequip an item on your character.
 * @summary Action Unequip Item
 */
export const actionUnequipItemMyNameActionUnequipPost = <TData = AxiosResponse<EquipmentResponseSchema>>(
    name: string,
    unequipSchema: UnequipSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/unequip`,
      unequipSchema,options
    );
  }

/**
 * Use an item as a consumable.
 * @summary Action Use Item
 */
export const actionUseItemMyNameActionUsePost = <TData = AxiosResponse<UseItemResponseSchema>>(
    name: string,
    simpleItemSchema: SimpleItemSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/use`,
      simpleItemSchema,options
    );
  }

/**
 * Start a fight against a monster on the character's map. Possibility of fighting with 2 other characters for boss fights.
 * @summary Action Fight
 */
export const actionFightMyNameActionFightPost = <TData = AxiosResponse<CharacterFightResponseSchema>>(
    name: string,
    fightRequestSchema: FightRequestSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/fight`,
      fightRequestSchema,options
    );
  }

/**
 * Harvest a resource on the character's map.
 * @summary Action Gathering
 */
export const actionGatheringMyNameActionGatheringPost = <TData = AxiosResponse<SkillResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/gathering`,undefined,options
    );
  }

/**
 * Craft an item. The character must be on a map with a workshop.
 * @summary Action Crafting
 */
export const actionCraftingMyNameActionCraftingPost = <TData = AxiosResponse<SkillResponseSchema>>(
    name: string,
    craftingSchema: CraftingSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/crafting`,
      craftingSchema,options
    );
  }

/**
 * Deposit gold in a bank on the character's map.
 * @summary Action Deposit Bank Gold
 */
export const actionDepositBankGoldMyNameActionBankDepositGoldPost = <TData = AxiosResponse<BankGoldTransactionResponseSchema>>(
    name: string,
    depositWithdrawGoldSchema: DepositWithdrawGoldSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/bank/deposit/gold`,
      depositWithdrawGoldSchema,options
    );
  }

/**
 * Deposit multiple items in a bank on the character's map.
The cooldown will be 3 seconds multiplied by the number of different items deposited.
 * @summary Action Deposit Bank Item
 */
export const actionDepositBankItemMyNameActionBankDepositItemPost = <TData = AxiosResponse<BankItemTransactionResponseSchema>>(
    name: string,
    simpleItemSchema: SimpleItemSchema[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/bank/deposit/item`,
      simpleItemSchema,options
    );
  }

/**
 * Take items from your bank and put them in the character's inventory.
The cooldown will be 3 seconds multiplied by the number of different items withdrawn.
 * @summary Action Withdraw Bank Item
 */
export const actionWithdrawBankItemMyNameActionBankWithdrawItemPost = <TData = AxiosResponse<BankItemTransactionResponseSchema>>(
    name: string,
    simpleItemSchema: SimpleItemSchema[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/bank/withdraw/item`,
      simpleItemSchema,options
    );
  }

/**
 * Withdraw gold from your bank.
 * @summary Action Withdraw Bank Gold
 */
export const actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost = <TData = AxiosResponse<BankGoldTransactionResponseSchema>>(
    name: string,
    depositWithdrawGoldSchema: DepositWithdrawGoldSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/bank/withdraw/gold`,
      depositWithdrawGoldSchema,options
    );
  }

/**
 * Buy a 20 slots bank expansion.
 * @summary Action Buy Bank Expansion
 */
export const actionBuyBankExpansionMyNameActionBankBuyExpansionPost = <TData = AxiosResponse<BankExtensionTransactionResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/bank/buy_expansion`,undefined,options
    );
  }

/**
 * Buy an item from an NPC on the character's map.
 * @summary Action Npc Buy Item
 */
export const actionNpcBuyItemMyNameActionNpcBuyPost = <TData = AxiosResponse<NpcMerchantTransactionResponseSchema>>(
    name: string,
    npcMerchantBuySchema: NpcMerchantBuySchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/npc/buy`,
      npcMerchantBuySchema,options
    );
  }

/**
 * Sell an item to an NPC on the character's map.
 * @summary Action Npc Sell Item
 */
export const actionNpcSellItemMyNameActionNpcSellPost = <TData = AxiosResponse<NpcMerchantTransactionResponseSchema>>(
    name: string,
    npcMerchantBuySchema: NpcMerchantBuySchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/npc/sell`,
      npcMerchantBuySchema,options
    );
  }

/**
 * Recycling an item. The character must be on a map with a workshop (only for equipments and weapons).
 * @summary Action Recycling
 */
export const actionRecyclingMyNameActionRecyclingPost = <TData = AxiosResponse<RecyclingResponseSchema>>(
    name: string,
    recyclingSchema: RecyclingSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/recycling`,
      recyclingSchema,options
    );
  }

/**
 * Buy an item at the Grand Exchange on the character's map.
 * @summary Action Ge Buy Item
 */
export const actionGeBuyItemMyNameActionGrandexchangeBuyPost = <TData = AxiosResponse<GETransactionResponseSchema>>(
    name: string,
    gEBuyOrderSchema: GEBuyOrderSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/grandexchange/buy`,
      gEBuyOrderSchema,options
    );
  }

/**
 * Create a sell order at the Grand Exchange on the character's map. 
Please note there is a 3% listing tax, charged at the time of posting, on the total price.
 * @summary Action Ge Create Sell Order
 */
export const actionGeCreateSellOrderMyNameActionGrandexchangeSellPost = <TData = AxiosResponse<GECreateOrderTransactionResponseSchema>>(
    name: string,
    gEOrderCreationrSchema: GEOrderCreationrSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/grandexchange/sell`,
      gEOrderCreationrSchema,options
    );
  }

/**
 * Cancel a sell order at the Grand Exchange on the character's map.
 * @summary Action Ge Cancel Sell Order
 */
export const actionGeCancelSellOrderMyNameActionGrandexchangeCancelPost = <TData = AxiosResponse<GETransactionResponseSchema>>(
    name: string,
    gECancelOrderSchema: GECancelOrderSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/grandexchange/cancel`,
      gECancelOrderSchema,options
    );
  }

/**
 * Complete a task.
 * @summary Action Complete Task
 */
export const actionCompleteTaskMyNameActionTaskCompletePost = <TData = AxiosResponse<RewardDataResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/task/complete`,undefined,options
    );
  }

/**
 * Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
 * @summary Action Task Exchange
 */
export const actionTaskExchangeMyNameActionTaskExchangePost = <TData = AxiosResponse<RewardDataResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/task/exchange`,undefined,options
    );
  }

/**
 * Accepting a new task.
 * @summary Action Accept New Task
 */
export const actionAcceptNewTaskMyNameActionTaskNewPost = <TData = AxiosResponse<TaskResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/task/new`,undefined,options
    );
  }

/**
 * Trading items with a Tasks Master.
 * @summary Action Task Trade
 */
export const actionTaskTradeMyNameActionTaskTradePost = <TData = AxiosResponse<TaskTradeResponseSchema>>(
    name: string,
    simpleItemSchema: SimpleItemSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/task/trade`,
      simpleItemSchema,options
    );
  }

/**
 * Cancel a task for 1 tasks coin.
 * @summary Action Task Cancel
 */
export const actionTaskCancelMyNameActionTaskCancelPost = <TData = AxiosResponse<TaskCancelledResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/task/cancel`,undefined,options
    );
  }

/**
 * Give gold to another character in your account on the same map.
 * @summary Action Give Gold
 */
export const actionGiveGoldMyNameActionGiveGoldPost = <TData = AxiosResponse<GiveGoldResponseSchema>>(
    name: string,
    giveGoldSchema: GiveGoldSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/give/gold`,
      giveGoldSchema,options
    );
  }

/**
 * Give items to another character in your account on the same map.
The cooldown will be 3 seconds multiplied by the number of different items given.
 * @summary Action Give Items
 */
export const actionGiveItemsMyNameActionGiveItemPost = <TData = AxiosResponse<GiveItemResponseSchema>>(
    name: string,
    giveItemsSchema: GiveItemsSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/give/item`,
      giveItemsSchema,options
    );
  }

/**
 * Delete an item from your character's inventory.
 * @summary Action Delete Item
 */
export const actionDeleteItemMyNameActionDeletePost = <TData = AxiosResponse<DeleteItemResponseSchema>>(
    name: string,
    simpleItemSchema: SimpleItemSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/delete`,
      simpleItemSchema,options
    );
  }

/**
 * Change the skin of your character.
 * @summary Action Change Skin
 */
export const actionChangeSkinMyNameActionChangeSkinPost = <TData = AxiosResponse<ChangeSkinResponseSchema>>(
    name: string,
    changeSkinCharacterSchema: ChangeSkinCharacterSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/my/${name}/action/change_skin`,
      changeSkinCharacterSchema,options
    );
  }

/**
 * History of the last 250 actions of all your characters.
 * @summary Get All Characters Logs
 */
export const getAllCharactersLogsMyLogsGet = <TData = AxiosResponse<DataPageLogSchema>>(
    params?: GetAllCharactersLogsMyLogsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/logs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * History of the last actions of your character.
 * @summary Get Character Logs
 */
export const getCharacterLogsMyLogsNameGet = <TData = AxiosResponse<DataPageLogSchema>>(
    name: string,
    params?: GetCharacterLogsMyLogsNameGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/logs/${name}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * List of your characters.
 * @summary Get My Characters
 */
export const getMyCharactersMyCharactersGet = <TData = AxiosResponse<MyCharactersListSchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/my/characters`,options
    );
  }

/**
 * @summary Create Account
 */
export const createAccountAccountsCreatePost = <TData = AxiosResponse<ResponseSchema>>(
    addAccountSchema: AddAccountSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/accounts/create`,
      addAccountSchema,options
    );
  }

/**
 * Request a password reset.
 * @summary Forgot Password
 */
export const forgotPasswordAccountsForgotPasswordPost = <TData = AxiosResponse<PasswordResetResponseSchema>>(
    passwordResetRequestSchema: PasswordResetRequestSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/accounts/forgot_password`,
      passwordResetRequestSchema,options
    );
  }

/**
 * Reset password with a token. Use /forgot_password to get a token by email.
 * @summary Reset Password
 */
export const resetPasswordAccountsResetPasswordPost = <TData = AxiosResponse<PasswordResetResponseSchema>>(
    passwordResetConfirmSchema: PasswordResetConfirmSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/accounts/reset_password`,
      passwordResetConfirmSchema,options
    );
  }

/**
 * Retrieve the achievements of a account.
 * @summary Get Account Achievements
 */
export const getAccountAchievementsAccountsAccountAchievementsGet = <TData = AxiosResponse<DataPageAccountAchievementSchema>>(
    account: string,
    params?: GetAccountAchievementsAccountsAccountAchievementsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/accounts/${account}/achievements`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Account character lists.
 * @summary Get Account Characters
 */
export const getAccountCharactersAccountsAccountCharactersGet = <TData = AxiosResponse<CharactersListSchema>>(
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/accounts/${account}/characters`,options
    );
  }

/**
 * Retrieve the details of an account.
 * @summary Get Account
 */
export const getAccountAccountsAccountGet = <TData = AxiosResponse<AccountDetailsSchema>>(
    account: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/accounts/${account}`,options
    );
  }

/**
 * List of all achievements.
 * @summary Get All Achievements
 */
export const getAllAchievementsAchievementsGet = <TData = AxiosResponse<DataPageAchievementSchema>>(
    params?: GetAllAchievementsAchievementsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/achievements`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of an achievement.
 * @summary Get Achievement
 */
export const getAchievementAchievementsCodeGet = <TData = AxiosResponse<AchievementResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/achievements/${code}`,options
    );
  }

/**
 * List of all badges.
 * @summary Get All Badges
 */
export const getAllBadgesBadgesGet = <TData = AxiosResponse<DataPageBadgeSchema>>(
    params?: GetAllBadgesBadgesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/badges`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a badge.
 * @summary Get Badge
 */
export const getBadgeBadgesCodeGet = <TData = AxiosResponse<BadgeResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/badges/${code}`,options
    );
  }

/**
 * Create new character on your account. You can create up to 5 characters.
 * @summary Create Character
 */
export const createCharacterCharactersCreatePost = <TData = AxiosResponse<CharacterResponseSchema>>(
    addCharacterSchema: AddCharacterSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/characters/create`,
      addCharacterSchema,options
    );
  }

/**
 * Delete character on your account.
 * @summary Delete Character
 */
export const deleteCharacterCharactersDeletePost = <TData = AxiosResponse<CharacterResponseSchema>>(
    deleteCharacterSchema: DeleteCharacterSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/characters/delete`,
      deleteCharacterSchema,options
    );
  }

/**
 * Fetch active characters details.
 * @summary Get Active Characters
 */
export const getActiveCharactersCharactersActiveGet = <TData = AxiosResponse<DataPageActiveCharacterSchema>>(
    params?: GetActiveCharactersCharactersActiveGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/characters/active`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a character.
 * @summary Get Character
 */
export const getCharacterCharactersNameGet = <TData = AxiosResponse<CharacterResponseSchema>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/characters/${name}`,options
    );
  }

/**
 * List of all effects. Effects are used by equipment, tools, runes, consumables and monsters. An effect is an action that produces an effect on the game.
 * @summary Get All Effects
 */
export const getAllEffectsEffectsGet = <TData = AxiosResponse<DataPageEffectSchema>>(
    params?: GetAllEffectsEffectsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/effects`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of an effect.
 * @summary Get Effect
 */
export const getEffectEffectsCodeGet = <TData = AxiosResponse<EffectResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/effects/${code}`,options
    );
  }

/**
 * Fetch active events details.
 * @summary Get All Active Events
 */
export const getAllActiveEventsEventsActiveGet = <TData = AxiosResponse<DataPageActiveEventSchema>>(
    params?: GetAllActiveEventsEventsActiveGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/events/active`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch events details.
 * @summary Get All Events
 */
export const getAllEventsEventsGet = <TData = AxiosResponse<DataPageEventSchema>>(
    params?: GetAllEventsEventsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Spawn a specific event by code consuming 1 event token.

Rules:
  - Maximum active events defined by utils.config.max_active_events().
  - Event must not already be active.
  - Member or founder account required.
 * @summary Spawn Event
 */
export const spawnEventEventsSpawnPost = <TData = AxiosResponse<ActiveEventResponseSchema>>(
    spawnEventRequest: SpawnEventRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/events/spawn`,
      spawnEventRequest,options
    );
  }

/**
 * Fetch the sales history of the item for the last 7 days.
 * @summary Get Ge Sell History
 */
export const getGeSellHistoryGrandexchangeHistoryCodeGet = <TData = AxiosResponse<DataPageGeOrderHistorySchema>>(
    code: string,
    params?: GetGeSellHistoryGrandexchangeHistoryCodeGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/grandexchange/history/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch all sell orders.
 * @summary Get Ge Sell Orders
 */
export const getGeSellOrdersGrandexchangeOrdersGet = <TData = AxiosResponse<DataPageGEOrderSchema>>(
    params?: GetGeSellOrdersGrandexchangeOrdersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/grandexchange/orders`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the sell order of a item.
 * @summary Get Ge Sell Order
 */
export const getGeSellOrderGrandexchangeOrdersIdGet = <TData = AxiosResponse<GEOrderResponseSchema>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/grandexchange/orders/${id}`,options
    );
  }

/**
 * Fetch items details.
 * @summary Get All Items
 */
export const getAllItemsItemsGet = <TData = AxiosResponse<DataPageItemSchema>>(
    params?: GetAllItemsItemsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a item.
 * @summary Get Item
 */
export const getItemItemsCodeGet = <TData = AxiosResponse<ItemResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/items/${code}`,options
    );
  }

/**
 * Fetch leaderboard details.
 * @summary Get Characters Leaderboard
 */
export const getCharactersLeaderboardLeaderboardCharactersGet = <TData = AxiosResponse<DataPageCharacterLeaderboardSchema>>(
    params?: GetCharactersLeaderboardLeaderboardCharactersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/leaderboard/characters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch leaderboard details.
 * @summary Get Accounts Leaderboard
 */
export const getAccountsLeaderboardLeaderboardAccountsGet = <TData = AxiosResponse<DataPageAccountLeaderboardSchema>>(
    params?: GetAccountsLeaderboardLeaderboardAccountsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/leaderboard/accounts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch maps details.
 * @summary Get All Maps
 */
export const getAllMapsMapsGet = <TData = AxiosResponse<DataPageMapSchema>>(
    params?: GetAllMapsMapsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/maps`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch maps details.
 * @summary Get Layer Maps
 */
export const getLayerMapsMapsLayerGet = <TData = AxiosResponse<DataPageMapSchema>>(
    layer: MapLayer,
    params?: GetLayerMapsMapsLayerGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/maps/${layer}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a map by layer and coordinates.
 * @summary Get Map By Position
 */
export const getMapByPositionMapsLayerXYGet = <TData = AxiosResponse<MapResponseSchema>>(
    layer: MapLayer,
    x: number,
    y: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/maps/${layer}/${x}/${y}`,options
    );
  }

/**
 * Retrieve the details of a map by its unique ID.
 * @summary Get Map By Id
 */
export const getMapByIdMapsIdMapIdGet = <TData = AxiosResponse<MapResponseSchema>>(
    mapId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/maps/id/${mapId}`,options
    );
  }

/**
 * Fetch monsters details.
 * @summary Get All Monsters
 */
export const getAllMonstersMonstersGet = <TData = AxiosResponse<DataPageMonsterSchema>>(
    params?: GetAllMonstersMonstersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/monsters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a monster.
 * @summary Get Monster
 */
export const getMonsterMonstersCodeGet = <TData = AxiosResponse<MonsterResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/monsters/${code}`,options
    );
  }

/**
 * Fetch NPCs details.
 * @summary Get All Npcs
 */
export const getAllNpcsNpcsDetailsGet = <TData = AxiosResponse<DataPageNPCSchema>>(
    params?: GetAllNpcsNpcsDetailsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/npcs/details`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a NPC.
 * @summary Get Npc
 */
export const getNpcNpcsDetailsCodeGet = <TData = AxiosResponse<NPCResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/npcs/details/${code}`,options
    );
  }

/**
 * Retrieve the items list of a NPC. If the NPC has items to buy, sell or trade, they will be displayed.
 * @summary Get Npc Items
 */
export const getNpcItemsNpcsItemsCodeGet = <TData = AxiosResponse<DataPageNPCItem>>(
    code: string,
    params?: GetNpcItemsNpcsItemsCodeGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/npcs/items/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the list of all NPC items.
 * @summary Get All Npcs Items
 */
export const getAllNpcsItemsNpcsItemsGet = <TData = AxiosResponse<DataPageNPCItem>>(
    params?: GetAllNpcsItemsNpcsItemsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/npcs/items`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Fetch resources details.
 * @summary Get All Resources
 */
export const getAllResourcesResourcesGet = <TData = AxiosResponse<DataPageResourceSchema>>(
    params?: GetAllResourcesResourcesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/resources`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a resource.
 * @summary Get Resource
 */
export const getResourceResourcesCodeGet = <TData = AxiosResponse<ResourceResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/resources/${code}`,options
    );
  }

/**
 * Fetch the list of all tasks.
 * @summary Get All Tasks
 */
export const getAllTasksTasksListGet = <TData = AxiosResponse<DataPageTaskFullSchema>>(
    params?: GetAllTasksTasksListGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/tasks/list`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a task.
 * @summary Get Task
 */
export const getTaskTasksListCodeGet = <TData = AxiosResponse<TaskFullResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/tasks/list/${code}`,options
    );
  }

/**
 * Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.
 * @summary Get All Tasks Rewards
 */
export const getAllTasksRewardsTasksRewardsGet = <TData = AxiosResponse<DataPageDropRateSchema>>(
    params?: GetAllTasksRewardsTasksRewardsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/tasks/rewards`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retrieve the details of a tasks reward.
 * @summary Get Tasks Reward
 */
export const getTasksRewardTasksRewardsCodeGet = <TData = AxiosResponse<RewardResponseSchema>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/tasks/rewards/${code}`,options
    );
  }

/**
 * Simulate combat with fake characters against a monster multiple times.
Member or founder account required.
 * @summary Fight Simulation
 */
export const fightSimulationSimulationFightSimulationPost = <TData = AxiosResponse<CombatSimulationResponseSchema>>(
    combatSimulationRequestSchema: CombatSimulationRequestSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/simulation/fight_simulation`,
      combatSimulationRequestSchema,options
    );
  }

/**
 * Give gold to one of your characters. This Sandbox feature is only available on the Sandbox server.
 * @summary Give Gold
 */
export const giveGoldSandboxGiveGoldPost = <TData = AxiosResponse<SandboxResponseSchema>>(
    giveGoldSchema: GiveGoldSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sandbox/give_gold`,
      giveGoldSchema,options
    );
  }

/**
 * Give item to one of your characters. This Sandbox feature is only available on the Sandbox server.
 * @summary Give Item
 */
export const giveItemSandboxGiveItemPost = <TData = AxiosResponse<SandboxResponseSchema>>(
    sandboxGiveItemSchema: SandboxGiveItemSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sandbox/give_item`,
      sandboxGiveItemSchema,options
    );
  }

/**
 * Give XP to one of your characters. This Sandbox feature is only available on the Sandbox server.
 * @summary Give Xp
 */
export const giveXpSandboxGiveXpPost = <TData = AxiosResponse<SandboxResponseSchema>>(
    sandboxGiveXpSchema: SandboxGiveXpSchema, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sandbox/give_xp`,
      sandboxGiveXpSchema,options
    );
  }

/**
 * Spawn a specific event by code (Sandbox only).

Notes:
  - 3 active events maximum.
  - Fails if event already active or not found.
 * @summary Spawn Event
 */
export const spawnEventSandboxSpawnEventPost = <TData = AxiosResponse<ActiveEventResponseSchema>>(
    spawnEventRequest: SpawnEventRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/sandbox/spawn_event`,
      spawnEventRequest,options
    );
  }

/**
 * Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
 * @summary Generate Token
 */
export const generateTokenTokenPost = <TData = AxiosResponse<TokenResponseSchema>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/token`,undefined,options
    );
  }

export type GetServerDetailsGetResult = AxiosResponse<StatusResponseSchema>
export type GetBankDetailsMyBankGetResult = AxiosResponse<BankResponseSchema>
export type GetBankItemsMyBankItemsGetResult = AxiosResponse<DataPageSimpleItemSchema>
export type GetGeSellOrdersMyGrandexchangeOrdersGetResult = AxiosResponse<DataPageGEOrderSchema>
export type GetGeSellHistoryMyGrandexchangeHistoryGetResult = AxiosResponse<DataPageGeOrderHistorySchema>
export type GetAccountDetailsMyDetailsGetResult = AxiosResponse<MyAccountDetailsSchema>
export type ChangePasswordMyChangePasswordPostResult = AxiosResponse<ResponseSchema>
export type ActionMoveMyNameActionMovePostResult = AxiosResponse<CharacterMovementResponseSchema>
export type ActionTransitionMyNameActionTransitionPostResult = AxiosResponse<CharacterTransitionResponseSchema>
export type ActionRestMyNameActionRestPostResult = AxiosResponse<CharacterRestResponseSchema>
export type ActionEquipItemMyNameActionEquipPostResult = AxiosResponse<EquipmentResponseSchema>
export type ActionUnequipItemMyNameActionUnequipPostResult = AxiosResponse<EquipmentResponseSchema>
export type ActionUseItemMyNameActionUsePostResult = AxiosResponse<UseItemResponseSchema>
export type ActionFightMyNameActionFightPostResult = AxiosResponse<CharacterFightResponseSchema>
export type ActionGatheringMyNameActionGatheringPostResult = AxiosResponse<SkillResponseSchema>
export type ActionCraftingMyNameActionCraftingPostResult = AxiosResponse<SkillResponseSchema>
export type ActionDepositBankGoldMyNameActionBankDepositGoldPostResult = AxiosResponse<BankGoldTransactionResponseSchema>
export type ActionDepositBankItemMyNameActionBankDepositItemPostResult = AxiosResponse<BankItemTransactionResponseSchema>
export type ActionWithdrawBankItemMyNameActionBankWithdrawItemPostResult = AxiosResponse<BankItemTransactionResponseSchema>
export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResult = AxiosResponse<BankGoldTransactionResponseSchema>
export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResult = AxiosResponse<BankExtensionTransactionResponseSchema>
export type ActionNpcBuyItemMyNameActionNpcBuyPostResult = AxiosResponse<NpcMerchantTransactionResponseSchema>
export type ActionNpcSellItemMyNameActionNpcSellPostResult = AxiosResponse<NpcMerchantTransactionResponseSchema>
export type ActionRecyclingMyNameActionRecyclingPostResult = AxiosResponse<RecyclingResponseSchema>
export type ActionGeBuyItemMyNameActionGrandexchangeBuyPostResult = AxiosResponse<GETransactionResponseSchema>
export type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResult = AxiosResponse<GECreateOrderTransactionResponseSchema>
export type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResult = AxiosResponse<GETransactionResponseSchema>
export type ActionCompleteTaskMyNameActionTaskCompletePostResult = AxiosResponse<RewardDataResponseSchema>
export type ActionTaskExchangeMyNameActionTaskExchangePostResult = AxiosResponse<RewardDataResponseSchema>
export type ActionAcceptNewTaskMyNameActionTaskNewPostResult = AxiosResponse<TaskResponseSchema>
export type ActionTaskTradeMyNameActionTaskTradePostResult = AxiosResponse<TaskTradeResponseSchema>
export type ActionTaskCancelMyNameActionTaskCancelPostResult = AxiosResponse<TaskCancelledResponseSchema>
export type ActionGiveGoldMyNameActionGiveGoldPostResult = AxiosResponse<GiveGoldResponseSchema>
export type ActionGiveItemsMyNameActionGiveItemPostResult = AxiosResponse<GiveItemResponseSchema>
export type ActionDeleteItemMyNameActionDeletePostResult = AxiosResponse<DeleteItemResponseSchema>
export type ActionChangeSkinMyNameActionChangeSkinPostResult = AxiosResponse<ChangeSkinResponseSchema>
export type GetAllCharactersLogsMyLogsGetResult = AxiosResponse<DataPageLogSchema>
export type GetCharacterLogsMyLogsNameGetResult = AxiosResponse<DataPageLogSchema>
export type GetMyCharactersMyCharactersGetResult = AxiosResponse<MyCharactersListSchema>
export type CreateAccountAccountsCreatePostResult = AxiosResponse<ResponseSchema>
export type ForgotPasswordAccountsForgotPasswordPostResult = AxiosResponse<PasswordResetResponseSchema>
export type ResetPasswordAccountsResetPasswordPostResult = AxiosResponse<PasswordResetResponseSchema>
export type GetAccountAchievementsAccountsAccountAchievementsGetResult = AxiosResponse<DataPageAccountAchievementSchema>
export type GetAccountCharactersAccountsAccountCharactersGetResult = AxiosResponse<CharactersListSchema>
export type GetAccountAccountsAccountGetResult = AxiosResponse<AccountDetailsSchema>
export type GetAllAchievementsAchievementsGetResult = AxiosResponse<DataPageAchievementSchema>
export type GetAchievementAchievementsCodeGetResult = AxiosResponse<AchievementResponseSchema>
export type GetAllBadgesBadgesGetResult = AxiosResponse<DataPageBadgeSchema>
export type GetBadgeBadgesCodeGetResult = AxiosResponse<BadgeResponseSchema>
export type CreateCharacterCharactersCreatePostResult = AxiosResponse<CharacterResponseSchema>
export type DeleteCharacterCharactersDeletePostResult = AxiosResponse<CharacterResponseSchema>
export type GetActiveCharactersCharactersActiveGetResult = AxiosResponse<DataPageActiveCharacterSchema>
export type GetCharacterCharactersNameGetResult = AxiosResponse<CharacterResponseSchema>
export type GetAllEffectsEffectsGetResult = AxiosResponse<DataPageEffectSchema>
export type GetEffectEffectsCodeGetResult = AxiosResponse<EffectResponseSchema>
export type GetAllActiveEventsEventsActiveGetResult = AxiosResponse<DataPageActiveEventSchema>
export type GetAllEventsEventsGetResult = AxiosResponse<DataPageEventSchema>
export type SpawnEventEventsSpawnPostResult = AxiosResponse<ActiveEventResponseSchema>
export type GetGeSellHistoryGrandexchangeHistoryCodeGetResult = AxiosResponse<DataPageGeOrderHistorySchema>
export type GetGeSellOrdersGrandexchangeOrdersGetResult = AxiosResponse<DataPageGEOrderSchema>
export type GetGeSellOrderGrandexchangeOrdersIdGetResult = AxiosResponse<GEOrderResponseSchema>
export type GetAllItemsItemsGetResult = AxiosResponse<DataPageItemSchema>
export type GetItemItemsCodeGetResult = AxiosResponse<ItemResponseSchema>
export type GetCharactersLeaderboardLeaderboardCharactersGetResult = AxiosResponse<DataPageCharacterLeaderboardSchema>
export type GetAccountsLeaderboardLeaderboardAccountsGetResult = AxiosResponse<DataPageAccountLeaderboardSchema>
export type GetAllMapsMapsGetResult = AxiosResponse<DataPageMapSchema>
export type GetLayerMapsMapsLayerGetResult = AxiosResponse<DataPageMapSchema>
export type GetMapByPositionMapsLayerXYGetResult = AxiosResponse<MapResponseSchema>
export type GetMapByIdMapsIdMapIdGetResult = AxiosResponse<MapResponseSchema>
export type GetAllMonstersMonstersGetResult = AxiosResponse<DataPageMonsterSchema>
export type GetMonsterMonstersCodeGetResult = AxiosResponse<MonsterResponseSchema>
export type GetAllNpcsNpcsDetailsGetResult = AxiosResponse<DataPageNPCSchema>
export type GetNpcNpcsDetailsCodeGetResult = AxiosResponse<NPCResponseSchema>
export type GetNpcItemsNpcsItemsCodeGetResult = AxiosResponse<DataPageNPCItem>
export type GetAllNpcsItemsNpcsItemsGetResult = AxiosResponse<DataPageNPCItem>
export type GetAllResourcesResourcesGetResult = AxiosResponse<DataPageResourceSchema>
export type GetResourceResourcesCodeGetResult = AxiosResponse<ResourceResponseSchema>
export type GetAllTasksTasksListGetResult = AxiosResponse<DataPageTaskFullSchema>
export type GetTaskTasksListCodeGetResult = AxiosResponse<TaskFullResponseSchema>
export type GetAllTasksRewardsTasksRewardsGetResult = AxiosResponse<DataPageDropRateSchema>
export type GetTasksRewardTasksRewardsCodeGetResult = AxiosResponse<RewardResponseSchema>
export type FightSimulationSimulationFightSimulationPostResult = AxiosResponse<CombatSimulationResponseSchema>
export type GiveGoldSandboxGiveGoldPostResult = AxiosResponse<SandboxResponseSchema>
export type GiveItemSandboxGiveItemPostResult = AxiosResponse<SandboxResponseSchema>
export type GiveXpSandboxGiveXpPostResult = AxiosResponse<SandboxResponseSchema>
export type SpawnEventSandboxSpawnEventPostResult = AxiosResponse<ActiveEventResponseSchema>
export type GenerateTokenTokenPostResult = AxiosResponse<TokenResponseSchema>
